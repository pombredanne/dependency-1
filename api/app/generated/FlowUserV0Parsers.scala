/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.3-dev
 * apidoc:0.9.48 http://www.apidoc.me/flow/user/0.0.3-dev/anorm_2_x_parsers
 */
import anorm._

package io.flow.user.v0.anorm.parsers {

  import io.flow.user.v0.anorm.conversions.Json._

  object System {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.System] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.user.v0.models.System(value)
      }
    }

  }
  object Name {

    case class Mappings(
      first: String = "first",
      last: String = "last"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        first = s"${prefix}${sep}first",
        last = s"${prefix}${sep}last"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.Name] = {
      SqlParser.str(mappings.first).? ~
      SqlParser.str(mappings.last).? map {
        case first ~ last => {
          io.flow.user.v0.models.Name(
            first = first,
            last = last
          )
        }
      }
    }

  }

  object NameForm {

    case class Mappings(
      first: String = "first",
      last: String = "last"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        first = s"${prefix}${sep}first",
        last = s"${prefix}${sep}last"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.NameForm] = {
      SqlParser.str(mappings.first).? ~
      SqlParser.str(mappings.last).? map {
        case first ~ last => {
          io.flow.user.v0.models.NameForm(
            first = first,
            last = last
          )
        }
      }
    }

  }

  object User {

    case class Mappings(
      id: String = "id",
      email: String = "email",
      name: io.flow.user.v0.anorm.parsers.Name.Mappings
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        email = s"${prefix}${sep}email",
        name = io.flow.user.v0.anorm.parsers.Name.Mappings.prefix(Seq(prefix, "name").filter(!_.isEmpty).mkString("_"), "_")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.User] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.email).? ~
      io.flow.user.v0.anorm.parsers.Name.parser(mappings.name) map {
        case id ~ email ~ name => {
          io.flow.user.v0.models.User(
            id = id,
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UserForm {

    case class Mappings(
      email: String = "email",
      name: io.flow.user.v0.anorm.parsers.NameForm.Mappings,
      avatarUrl: String = "avatar_url"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        email = s"${prefix}${sep}email",
        name = io.flow.user.v0.anorm.parsers.NameForm.Mappings.prefix(Seq(prefix, "name").filter(!_.isEmpty).mkString("_"), "_"),
        avatarUrl = s"${prefix}${sep}avatar_url"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.UserForm] = {
      SqlParser.str(mappings.email).? ~
      io.flow.user.v0.anorm.parsers.NameForm.parser(mappings.name).? ~
      SqlParser.str(mappings.avatarUrl).? map {
        case email ~ name ~ avatarUrl => {
          io.flow.user.v0.models.UserForm(
            email = email,
            name = name,
            avatarUrl = avatarUrl
          )
        }
      }
    }

  }

  object UserVersion {

    case class Mappings(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      user: io.flow.user.v0.anorm.parsers.User.Mappings
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        timestamp = s"${prefix}${sep}timestamp",
        `type` = s"${prefix}${sep}type",
        user = io.flow.user.v0.anorm.parsers.User.Mappings.prefix(Seq(prefix, "user").filter(!_.isEmpty).mkString("_"), "_")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.user.v0.models.UserVersion] = {
      SqlParser.str(mappings.id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(io.flow.common.v0.anorm.parsers.ChangeType.Mappings(mappings.`type`)) ~
      io.flow.user.v0.anorm.parsers.User.parser(mappings.user) map {
        case id ~ timestamp ~ typeInstance ~ user => {
          io.flow.user.v0.models.UserVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            user = user
          )
        }
      }
    }

  }

}