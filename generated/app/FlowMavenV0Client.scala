/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.47 http://www.apidoc.me/flow/maven/0.0.1-dev/ning_1_9_client
 */
package io.flow.maven.v0.models {

  case class ApiResponse(
    responseHeader: io.flow.maven.v0.models.ResponseHeader,
    response: io.flow.maven.v0.models.Response
  )

  case class Doc(
    id: String,
    g: String,
    a: String,
    latestVersion: String,
    repositoryId: String,
    p: String,
    timestamp: Long,
    versionCount: Long,
    text: Seq[String] = Nil,
    ec: Seq[String] = Nil
  )

  case class Response(
    numFound: Long,
    start: Long,
    docs: Seq[io.flow.maven.v0.models.Doc]
  )

  case class ResponseHeader(
    status: Int,
    QTime: Long,
    params: _root_.scala.Option[Map[String, String]] = None
  )

}

package io.flow.maven.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.maven.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsMavenApiResponse: play.api.libs.json.Reads[ApiResponse] = {
      (
        (__ \ "responseHeader").read[io.flow.maven.v0.models.ResponseHeader] and
        (__ \ "response").read[io.flow.maven.v0.models.Response]
      )(ApiResponse.apply _)
    }

    implicit def jsonWritesMavenApiResponse: play.api.libs.json.Writes[ApiResponse] = {
      (
        (__ \ "responseHeader").write[io.flow.maven.v0.models.ResponseHeader] and
        (__ \ "response").write[io.flow.maven.v0.models.Response]
      )(unlift(ApiResponse.unapply _))
    }

    implicit def jsonReadsMavenDoc: play.api.libs.json.Reads[Doc] = {
      (
        (__ \ "id").read[String] and
        (__ \ "g").read[String] and
        (__ \ "a").read[String] and
        (__ \ "latestVersion").read[String] and
        (__ \ "repositoryId").read[String] and
        (__ \ "p").read[String] and
        (__ \ "timestamp").read[Long] and
        (__ \ "versionCount").read[Long] and
        (__ \ "text").read[Seq[String]] and
        (__ \ "ec").read[Seq[String]]
      )(Doc.apply _)
    }

    implicit def jsonWritesMavenDoc: play.api.libs.json.Writes[Doc] = {
      (
        (__ \ "id").write[String] and
        (__ \ "g").write[String] and
        (__ \ "a").write[String] and
        (__ \ "latestVersion").write[String] and
        (__ \ "repositoryId").write[String] and
        (__ \ "p").write[String] and
        (__ \ "timestamp").write[Long] and
        (__ \ "versionCount").write[Long] and
        (__ \ "text").write[Seq[String]] and
        (__ \ "ec").write[Seq[String]]
      )(unlift(Doc.unapply _))
    }

    implicit def jsonReadsMavenResponse: play.api.libs.json.Reads[Response] = {
      (
        (__ \ "numFound").read[Long] and
        (__ \ "start").read[Long] and
        (__ \ "docs").read[Seq[io.flow.maven.v0.models.Doc]]
      )(Response.apply _)
    }

    implicit def jsonWritesMavenResponse: play.api.libs.json.Writes[Response] = {
      (
        (__ \ "numFound").write[Long] and
        (__ \ "start").write[Long] and
        (__ \ "docs").write[Seq[io.flow.maven.v0.models.Doc]]
      )(unlift(Response.unapply _))
    }

    implicit def jsonReadsMavenResponseHeader: play.api.libs.json.Reads[ResponseHeader] = {
      (
        (__ \ "status").read[Int] and
        (__ \ "QTime").read[Long] and
        (__ \ "params").readNullable[Map[String, String]]
      )(ResponseHeader.apply _)
    }

    implicit def jsonWritesMavenResponseHeader: play.api.libs.json.Writes[ResponseHeader] = {
      (
        (__ \ "status").write[Int] and
        (__ \ "QTime").write[Long] and
        (__ \ "params").writeNullable[Map[String, String]]
      )(unlift(ResponseHeader.unapply _))
    }
  }
}



package io.flow.maven.v0 {
  import com.ning.http.client.{AsyncCompletionHandler, AsyncHttpClient, AsyncHttpClientConfig, Realm, Request, RequestBuilder, Response}

  object Constants {

    val UserAgent = "apidoc:0.9.47 http://www.apidoc.me/flow/maven/0.0.1-dev/ning_1_9_client"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.maven.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    asyncHttpClient: AsyncHttpClient = Client.defaultAsyncHttpClient
  ) {
    import org.slf4j.Logger
    import org.slf4j.LoggerFactory
    import io.flow.maven.v0.models.json._

    val logger = LoggerFactory.getLogger(getClass)

    def docs: Docs = Docs

    object Docs extends Docs {
      override def getSelect(
        q: String,
        wt: String = "json",
        rows: _root_.scala.Option[Long] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.maven.v0.models.ApiResponse] = {
        val queryParameters = Seq(
          Some("q" -> q),
          Some("wt" -> wt),
          rows.map("rows" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/select", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.maven.v0.Client.parseJson("io.flow.maven.v0.models.ApiResponse", r, _.validate[io.flow.maven.v0.models.ApiResponse])
          case r => throw new io.flow.maven.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }
    }

    def _logRequest(request: Request) {
      logger.info("_logRequest: " + request)
    }

    def _requestBuilder(method: String, path: String): RequestBuilder = {
      val builder = new RequestBuilder(method)
        .setUrl(apiUrl + path)
        .addHeader("User-Agent", Constants.UserAgent)
        .addHeader("X-Apidoc-Version", Constants.Version)
        .addHeader("X-Apidoc-Version-Major", Constants.VersionMajor.toString)

      defaultHeaders.foreach { h => builder.addHeader(h._1, h._2) }

      auth.fold(builder) {
        case Authorization.Basic(username, passwordOpt) => {
          builder.setRealm(
            new Realm.RealmBuilder()
              .setPrincipal(username)
              .setPassword(passwordOpt.getOrElse(""))
              .setUsePreemptiveAuth(true)
              .setScheme(Realm.AuthScheme.BASIC)
              .build()
          )
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.ning.http.client.Response] = {
      val request = _requestBuilder(method, path)

      queryParameters.foreach { pair =>
        request.addQueryParam(pair._1, pair._2)
      }

      val requestWithParamsAndBody = body.fold(request) { b =>
        val serialized = play.api.libs.json.Json.stringify(b)
        request.setBody(serialized).addHeader("Content-type", "application/json; charset=UTF-8")
      }

      val finalRequest = requestWithParamsAndBody.build()
      _logRequest(finalRequest)

      val result = scala.concurrent.Promise[com.ning.http.client.Response]()
      asyncHttpClient.executeRequest(finalRequest,
        new AsyncCompletionHandler[Unit]() {
          override def onCompleted(r: com.ning.http.client.Response) = result.success(r)
          override def onThrowable(t: Throwable) = result.failure(t)
        }
      )
      result.future
    }

  }

  object Client {

    private lazy val defaultAsyncHttpClient = {
      new AsyncHttpClient(
        new AsyncHttpClientConfig.Builder()
          .setExecutorService(java.util.concurrent.Executors.newCachedThreadPool())
          .build()
      )
    }

    def parseJson[T](
      className: String,
      r: _root_.com.ning.http.client.Response,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.getResponseBody("UTF-8"))) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.maven.v0.errors.FailedRequest(r.getStatusCode, s"Invalid json for class[" + className + "]: " + errors.mkString(" "), requestUri = Some(r.getUri.toJavaNetURI))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Docs {
    def getSelect(
      q: String,
      wt: String = "json",
      rows: _root_.scala.Option[Long] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.maven.v0.models.ApiResponse]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

  object PathSegment {
    // See https://github.com/playframework/playframework/blob/2.3.x/framework/src/play/src/main/scala/play/utils/UriEncoding.scala
    def encode(s: String, inputCharset: String): String = {
      val in = s.getBytes(inputCharset)
      val out = new java.io.ByteArrayOutputStream()
      for (b <- in) {
        val allowed = segmentChars.get(b & 0xFF)
        if (allowed) {
          out.write(b)
        } else {
          out.write('%')
          out.write(upperHex((b >> 4) & 0xF))
          out.write(upperHex(b & 0xF))
        }
      }
      out.toString("US-ASCII")
    }

    private def upperHex(x: Int): Int = {
      // Assume 0 <= x < 16
      if (x < 10) (x + '0') else (x - 10 + 'A')
    }

    private[this] val segmentChars: java.util.BitSet = membershipTable(pchar)

    private def pchar: Seq[Char] = {
      val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c
      val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')
      val subDelims = Seq('!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=')
      unreserved ++ subDelims ++ Seq(':', '@')
    }

    private def membershipTable(chars: Seq[Char]): java.util.BitSet = {
      val bits = new java.util.BitSet(256)
      for (c <- chars) { bits.set(c.toInt) }
      bits
    }
  }
}