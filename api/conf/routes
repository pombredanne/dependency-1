# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.6
# apidoc:0.9.48 http://www.apidoc.me/bryzek/dependency/0.0.6/play_2_x_routes

GET        /binaries                         controllers.Binaries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], name: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /binaries/:guid                   controllers.Binaries.getByGuid(guid: _root_.java.util.UUID)
POST       /binaries                         controllers.Binaries.post()
DELETE     /binaries/:guid                   controllers.Binaries.deleteByGuid(guid: _root_.java.util.UUID)
GET        /binary_versions                  controllers.BinaryVersions.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], binary_guid: _root_.scala.Option[_root_.java.util.UUID], project_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /binary_versions/:guid            controllers.BinaryVersions.getByGuid(guid: _root_.java.util.UUID)
POST       /authentications/github           controllers.GithubUsers.postAuthenticationsAndGithub()
GET        /_internal_/healthcheck           controllers.Healthchecks.getInternalAndHealthcheck()
GET        /users                            controllers.Users.get(id: _root_.scala.Option[String], email: _root_.scala.Option[String], identifier: _root_.scala.Option[String])
GET        /users/:id                        controllers.Users.getById(id: String)
GET        /users/:id/identifier             controllers.Users.getIdentifierById(id: String)
POST       /users                            controllers.Users.post()
GET        /search                           controllers.Items.getSearch(q: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /libraries                        controllers.Libraries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], resolver_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /libraries/:guid                  controllers.Libraries.getByGuid(guid: _root_.java.util.UUID)
POST       /libraries                        controllers.Libraries.post()
DELETE     /libraries/:guid                  controllers.Libraries.deleteByGuid(guid: _root_.java.util.UUID)
GET        /library_versions                 controllers.LibraryVersions.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], library_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /library_versions/:guid           controllers.LibraryVersions.getByGuid(guid: _root_.java.util.UUID)
GET        /memberships                      controllers.Memberships.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], organization: _root_.scala.Option[String], user_id: _root_.scala.Option[String], role: _root_.scala.Option[com.bryzek.dependency.v0.models.Role], limit: Long ?= 25, offset: Long ?= 0)
GET        /memberships/:guid                controllers.Memberships.getByGuid(guid: _root_.java.util.UUID)
POST       /memberships                      controllers.Memberships.post()
DELETE     /memberships/:guid                controllers.Memberships.deleteByGuid(guid: _root_.java.util.UUID)
GET        /organizations                    controllers.Organizations.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], user_id: _root_.scala.Option[String], key: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /organizations/users/:user_id     controllers.Organizations.getUsersByUserId(user_id: String)
GET        /organizations/:guid              controllers.Organizations.getByGuid(guid: _root_.java.util.UUID)
POST       /organizations                    controllers.Organizations.post()
PUT        /organizations/:guid              controllers.Organizations.putByGuid(guid: _root_.java.util.UUID)
DELETE     /organizations/:guid              controllers.Organizations.deleteByGuid(guid: _root_.java.util.UUID)
GET        /projects                         controllers.Projects.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], organization: _root_.scala.Option[String], name: _root_.scala.Option[String], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], version: _root_.scala.Option[String], library_guid: _root_.scala.Option[_root_.java.util.UUID], binary: _root_.scala.Option[String], binary_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /projects/:guid                   controllers.Projects.getByGuid(guid: _root_.java.util.UUID)
POST       /projects                         controllers.Projects.post()
PUT        /projects/:guid                   controllers.Projects.putByGuid(guid: _root_.java.util.UUID)
PATCH      /projects/:guid                   controllers.Projects.patchByGuid(guid: _root_.java.util.UUID)
DELETE     /projects/:guid                   controllers.Projects.deleteByGuid(guid: _root_.java.util.UUID)
GET        /project_binaries                 controllers.ProjectBinaries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], binary_guid: _root_.scala.Option[_root_.java.util.UUID], is_synced: _root_.scala.Option[Boolean], limit: Long ?= 25, offset: Long ?= 0)
GET        /project_libraries                controllers.ProjectLibraries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], library_guid: _root_.scala.Option[_root_.java.util.UUID], is_synced: _root_.scala.Option[Boolean], limit: Long ?= 25, offset: Long ?= 0)
GET        /recommendations                  controllers.Recommendations.get(organization: _root_.scala.Option[String], project_guid: _root_.scala.Option[_root_.java.util.UUID], type: _root_.scala.Option[com.bryzek.dependency.v0.models.RecommendationType], limit: Long ?= 25, offset: Long ?= 0)
GET        /repositories/github              controllers.Repositories.getGithub(name: _root_.scala.Option[String], organization_guid: _root_.scala.Option[_root_.java.util.UUID], existing_project: _root_.scala.Option[Boolean], limit: Long ?= 25, offset: Long ?= 0)
GET        /resolvers                        controllers.Resolvers.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], organization: _root_.scala.Option[String], visibility: _root_.scala.Option[com.bryzek.dependency.v0.models.Visibility], limit: Long ?= 25, offset: Long ?= 0)
GET        /resolvers/:guid                  controllers.Resolvers.getByGuid(guid: _root_.java.util.UUID)
POST       /resolvers                        controllers.Resolvers.post()
DELETE     /resolvers/:guid                  controllers.Resolvers.deleteByGuid(guid: _root_.java.util.UUID)
GET        /subscriptions                    controllers.Subscriptions.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], user_id: _root_.scala.Option[String], identifier: _root_.scala.Option[String], publication: _root_.scala.Option[com.bryzek.dependency.v0.models.Publication], limit: Long ?= 25, offset: Long ?= 0)
GET        /subscriptions/:guid              controllers.Subscriptions.getByGuid(guid: _root_.java.util.UUID)
POST       /subscriptions                    controllers.Subscriptions.post(identifier: _root_.scala.Option[String])
DELETE     /subscriptions/:guid              controllers.Subscriptions.deleteByGuid(guid: _root_.java.util.UUID, identifier: _root_.scala.Option[String])
GET        /syncs                            controllers.Syncs.get(object_guid: _root_.scala.Option[_root_.java.util.UUID], event: _root_.scala.Option[com.bryzek.dependency.v0.models.SyncEvent], limit: Long ?= 25, offset: Long ?= 0)