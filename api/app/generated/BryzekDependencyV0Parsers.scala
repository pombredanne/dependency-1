/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.4.5
 * apidoc:0.11.33 http://www.apidoc.me/bryzek/dependency/0.4.5/anorm_2_x_parsers
 */
import anorm._

package com.bryzek.dependency.v0.anorm.parsers {

  import com.bryzek.dependency.v0.anorm.conversions.Standard._

  import com.bryzek.dependency.v0.anorm.conversions.Types._
  import io.flow.common.v0.anorm.conversions.Types._

  object BinaryType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "binary_type"): RowParser[com.bryzek.dependency.v0.models.BinaryType] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.BinaryType(value)
      }
    }

  }

  object Publication {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "publication"): RowParser[com.bryzek.dependency.v0.models.Publication] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.Publication(value)
      }
    }

  }

  object RecommendationType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "recommendation_type"): RowParser[com.bryzek.dependency.v0.models.RecommendationType] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.RecommendationType(value)
      }
    }

  }

  object Role {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "role"): RowParser[com.bryzek.dependency.v0.models.Role] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.Role(value)
      }
    }

  }

  object Scms {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "scms"): RowParser[com.bryzek.dependency.v0.models.Scms] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.Scms(value)
      }
    }

  }

  object SyncEvent {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "sync_event"): RowParser[com.bryzek.dependency.v0.models.SyncEvent] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.SyncEvent(value)
      }
    }

  }

  object Visibility {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "visibility"): RowParser[com.bryzek.dependency.v0.models.Visibility] = {
      SqlParser.str(name) map {
        case value => com.bryzek.dependency.v0.models.Visibility(value)
      }
    }

  }

  object Binary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      name = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.Binary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.BinaryType.parser(name) map {
        case id ~ organization ~ name => {
          com.bryzek.dependency.v0.models.Binary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object BinaryForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      organizationId = s"$prefix${sep}organization_id",
      name = s"$prefix${sep}name"
    )

    def parser(
      organizationId: String = "organization_id",
      name: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.BinaryForm] = {
      SqlParser.str(organizationId) ~
      com.bryzek.dependency.v0.anorm.parsers.BinaryType.parser(name) map {
        case organizationId ~ name => {
          com.bryzek.dependency.v0.models.BinaryForm(
            organizationId = organizationId,
            name = name
          )
        }
      }
    }

  }

  object BinarySummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      name = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.BinarySummary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.BinaryType.parser(name) map {
        case id ~ organization ~ name => {
          com.bryzek.dependency.v0.models.BinarySummary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object BinaryVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      binaryPrefix = s"$prefix${sep}binary",
      version = s"$prefix${sep}version"
    )

    def parser(
      id: String = "id",
      binaryPrefix: String = "binary",
      version: String = "version"
    ): RowParser[com.bryzek.dependency.v0.models.BinaryVersion] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.Binary.parserWithPrefix(binaryPrefix) ~
      SqlParser.str(version) map {
        case id ~ binary ~ version => {
          com.bryzek.dependency.v0.models.BinaryVersion(
            id = id,
            binary = binary,
            version = version
          )
        }
      }
    }

  }

  object GithubAuthenticationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      code = s"$prefix${sep}code"
    )

    def parser(
      code: String = "code"
    ): RowParser[com.bryzek.dependency.v0.models.GithubAuthenticationForm] = {
      SqlParser.str(code) map {
        case code => {
          com.bryzek.dependency.v0.models.GithubAuthenticationForm(
            code = code
          )
        }
      }
    }

  }

  object GithubUser {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      githubUserId = s"$prefix${sep}github_user_id",
      login = s"$prefix${sep}login"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      githubUserId: String = "github_user_id",
      login: String = "login"
    ): RowParser[com.bryzek.dependency.v0.models.GithubUser] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      SqlParser.long(githubUserId) ~
      SqlParser.str(login) map {
        case id ~ user ~ githubUserId ~ login => {
          com.bryzek.dependency.v0.models.GithubUser(
            id = id,
            user = user,
            githubUserId = githubUserId,
            login = login
          )
        }
      }
    }

  }

  object GithubUserForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userId = s"$prefix${sep}user_id",
      githubUserId = s"$prefix${sep}github_user_id",
      login = s"$prefix${sep}login"
    )

    def parser(
      userId: String = "user_id",
      githubUserId: String = "github_user_id",
      login: String = "login"
    ): RowParser[com.bryzek.dependency.v0.models.GithubUserForm] = {
      SqlParser.str(userId) ~
      SqlParser.long(githubUserId) ~
      SqlParser.str(login) map {
        case userId ~ githubUserId ~ login => {
          com.bryzek.dependency.v0.models.GithubUserForm(
            userId = userId,
            githubUserId = githubUserId,
            login = login
          )
        }
      }
    }

  }

  object GithubWebhook {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[com.bryzek.dependency.v0.models.GithubWebhook] = {
      SqlParser.long(id) map {
        case id => {
          com.bryzek.dependency.v0.models.GithubWebhook(
            id = id
          )
        }
      }
    }

  }

  object Item {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      visibility = s"$prefix${sep}visibility",
      summaryPrefix = s"$prefix${sep}summary",
      label = s"$prefix${sep}label",
      description = s"$prefix${sep}description"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      visibility: String = "visibility",
      summaryPrefix: String = "summary",
      label: String = "label",
      description: String = "description"
    ): RowParser[com.bryzek.dependency.v0.models.Item] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      com.bryzek.dependency.v0.anorm.parsers.ItemSummary.parserWithPrefix(summaryPrefix) ~
      SqlParser.str(label) ~
      SqlParser.str(description).? map {
        case id ~ organization ~ visibility ~ summary ~ label ~ description => {
          com.bryzek.dependency.v0.models.Item(
            id = id,
            organization = organization,
            visibility = visibility,
            summary = summary,
            label = label,
            description = description
          )
        }
      }
    }

  }

  object Library {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      groupId = s"$prefix${sep}group_id",
      artifactId = s"$prefix${sep}artifact_id",
      resolverPrefix = s"$prefix${sep}resolver"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      resolverPrefix: String = "resolver"
    ): RowParser[com.bryzek.dependency.v0.models.Library] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(groupId) ~
      SqlParser.str(artifactId) ~
      com.bryzek.dependency.v0.anorm.parsers.ResolverSummary.parserWithPrefix(resolverPrefix) map {
        case id ~ organization ~ groupId ~ artifactId ~ resolver => {
          com.bryzek.dependency.v0.models.Library(
            id = id,
            organization = organization,
            groupId = groupId,
            artifactId = artifactId,
            resolver = resolver
          )
        }
      }
    }

  }

  object LibraryForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      organizationId = s"$prefix${sep}organization_id",
      groupId = s"$prefix${sep}group_id",
      artifactId = s"$prefix${sep}artifact_id",
      resolverId = s"$prefix${sep}resolver_id",
      versionPrefix = s"$prefix${sep}version"
    )

    def parser(
      organizationId: String = "organization_id",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      resolverId: String = "resolver_id",
      versionPrefix: String = "version"
    ): RowParser[com.bryzek.dependency.v0.models.LibraryForm] = {
      SqlParser.str(organizationId) ~
      SqlParser.str(groupId) ~
      SqlParser.str(artifactId) ~
      SqlParser.str(resolverId) ~
      com.bryzek.dependency.v0.anorm.parsers.VersionForm.parserWithPrefix(versionPrefix).? map {
        case organizationId ~ groupId ~ artifactId ~ resolverId ~ version => {
          com.bryzek.dependency.v0.models.LibraryForm(
            organizationId = organizationId,
            groupId = groupId,
            artifactId = artifactId,
            resolverId = resolverId,
            version = version
          )
        }
      }
    }

  }

  object LibrarySummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      groupId = s"$prefix${sep}group_id",
      artifactId = s"$prefix${sep}artifact_id"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      groupId: String = "group_id",
      artifactId: String = "artifact_id"
    ): RowParser[com.bryzek.dependency.v0.models.LibrarySummary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(groupId) ~
      SqlParser.str(artifactId) map {
        case id ~ organization ~ groupId ~ artifactId => {
          com.bryzek.dependency.v0.models.LibrarySummary(
            id = id,
            organization = organization,
            groupId = groupId,
            artifactId = artifactId
          )
        }
      }
    }

  }

  object LibraryVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      libraryPrefix = s"$prefix${sep}library",
      version = s"$prefix${sep}version",
      crossBuildVersion = s"$prefix${sep}cross_build_version"
    )

    def parser(
      id: String = "id",
      libraryPrefix: String = "library",
      version: String = "version",
      crossBuildVersion: String = "cross_build_version"
    ): RowParser[com.bryzek.dependency.v0.models.LibraryVersion] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.Library.parserWithPrefix(libraryPrefix) ~
      SqlParser.str(version) ~
      SqlParser.str(crossBuildVersion).? map {
        case id ~ library ~ version ~ crossBuildVersion => {
          com.bryzek.dependency.v0.models.LibraryVersion(
            id = id,
            library = library,
            version = version,
            crossBuildVersion = crossBuildVersion
          )
        }
      }
    }

  }

  object Membership {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      organizationPrefix = s"$prefix${sep}organization",
      role = s"$prefix${sep}role"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      organizationPrefix: String = "organization",
      role: String = "role"
    ): RowParser[com.bryzek.dependency.v0.models.Membership] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.UserSummary.parserWithPrefix(userPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.Role.parser(role) map {
        case id ~ user ~ organization ~ role => {
          com.bryzek.dependency.v0.models.Membership(
            id = id,
            user = user,
            organization = organization,
            role = role
          )
        }
      }
    }

  }

  object MembershipForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userId = s"$prefix${sep}user_id",
      organization = s"$prefix${sep}organization",
      role = s"$prefix${sep}role"
    )

    def parser(
      userId: String = "user_id",
      organization: String = "organization",
      role: String = "role"
    ): RowParser[com.bryzek.dependency.v0.models.MembershipForm] = {
      SqlParser.str(userId) ~
      SqlParser.str(organization) ~
      com.bryzek.dependency.v0.anorm.parsers.Role.parser(role) map {
        case userId ~ organization ~ role => {
          com.bryzek.dependency.v0.models.MembershipForm(
            userId = userId,
            organization = organization,
            role = role
          )
        }
      }
    }

  }

  object Organization {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      key = s"$prefix${sep}key"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      key: String = "key"
    ): RowParser[com.bryzek.dependency.v0.models.Organization] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      SqlParser.str(key) map {
        case id ~ user ~ key => {
          com.bryzek.dependency.v0.models.Organization(
            id = id,
            user = user,
            key = key
          )
        }
      }
    }

  }

  object OrganizationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      key = s"$prefix${sep}key"
    )

    def parser(
      key: String = "key"
    ): RowParser[com.bryzek.dependency.v0.models.OrganizationForm] = {
      SqlParser.str(key) map {
        case key => {
          com.bryzek.dependency.v0.models.OrganizationForm(
            key = key
          )
        }
      }
    }

  }

  object OrganizationSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      key = s"$prefix${sep}key"
    )

    def parser(
      id: String = "id",
      key: String = "key"
    ): RowParser[com.bryzek.dependency.v0.models.OrganizationSummary] = {
      SqlParser.str(id) ~
      SqlParser.str(key) map {
        case id ~ key => {
          com.bryzek.dependency.v0.models.OrganizationSummary(
            id = id,
            key = key
          )
        }
      }
    }

  }

  object Project {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      userPrefix = s"$prefix${sep}user",
      visibility = s"$prefix${sep}visibility",
      scms = s"$prefix${sep}scms",
      name = s"$prefix${sep}name",
      uri = s"$prefix${sep}uri"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      userPrefix: String = "user",
      visibility: String = "visibility",
      scms: String = "scms",
      name: String = "name",
      uri: String = "uri"
    ): RowParser[com.bryzek.dependency.v0.models.Project] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      com.bryzek.dependency.v0.anorm.parsers.Scms.parser(scms) ~
      SqlParser.str(name) ~
      SqlParser.str(uri) map {
        case id ~ organization ~ user ~ visibility ~ scms ~ name ~ uri => {
          com.bryzek.dependency.v0.models.Project(
            id = id,
            organization = organization,
            user = user,
            visibility = visibility,
            scms = scms,
            name = name,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectBinary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      projectPrefix = s"$prefix${sep}project",
      name = s"$prefix${sep}name",
      version = s"$prefix${sep}version",
      path = s"$prefix${sep}path",
      binaryPrefix = s"$prefix${sep}binary"
    )

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      name: String = "name",
      version: String = "version",
      path: String = "path",
      binaryPrefix: String = "binary"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectBinary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(projectPrefix) ~
      SqlParser.str(name) ~
      SqlParser.str(version) ~
      SqlParser.str(path) ~
      com.bryzek.dependency.v0.anorm.parsers.Reference.parserWithPrefix(binaryPrefix).? map {
        case id ~ project ~ name ~ version ~ path ~ binary => {
          com.bryzek.dependency.v0.models.ProjectBinary(
            id = id,
            project = project,
            name = name,
            version = version,
            path = path,
            binary = binary
          )
        }
      }
    }

  }

  object ProjectDetail {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      name = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectDetail] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(name) map {
        case id ~ organization ~ name => {
          com.bryzek.dependency.v0.models.ProjectDetail(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object ProjectForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      organization = s"$prefix${sep}organization",
      name = s"$prefix${sep}name",
      visibility = s"$prefix${sep}visibility",
      scms = s"$prefix${sep}scms",
      uri = s"$prefix${sep}uri"
    )

    def parser(
      organization: String = "organization",
      name: String = "name",
      visibility: String = "visibility",
      scms: String = "scms",
      uri: String = "uri"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectForm] = {
      SqlParser.str(organization) ~
      SqlParser.str(name) ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      com.bryzek.dependency.v0.anorm.parsers.Scms.parser(scms) ~
      SqlParser.str(uri) map {
        case organization ~ name ~ visibility ~ scms ~ uri => {
          com.bryzek.dependency.v0.models.ProjectForm(
            organization = organization,
            name = name,
            visibility = visibility,
            scms = scms,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectLibrary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      projectPrefix = s"$prefix${sep}project",
      groupId = s"$prefix${sep}group_id",
      artifactId = s"$prefix${sep}artifact_id",
      version = s"$prefix${sep}version",
      crossBuildVersion = s"$prefix${sep}cross_build_version",
      path = s"$prefix${sep}path",
      libraryPrefix = s"$prefix${sep}library"
    )

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      version: String = "version",
      crossBuildVersion: String = "cross_build_version",
      path: String = "path",
      libraryPrefix: String = "library"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectLibrary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(projectPrefix) ~
      SqlParser.str(groupId) ~
      SqlParser.str(artifactId) ~
      SqlParser.str(version) ~
      SqlParser.str(crossBuildVersion).? ~
      SqlParser.str(path) ~
      com.bryzek.dependency.v0.anorm.parsers.Reference.parserWithPrefix(libraryPrefix).? map {
        case id ~ project ~ groupId ~ artifactId ~ version ~ crossBuildVersion ~ path ~ library => {
          com.bryzek.dependency.v0.models.ProjectLibrary(
            id = id,
            project = project,
            groupId = groupId,
            artifactId = artifactId,
            version = version,
            crossBuildVersion = crossBuildVersion,
            path = path,
            library = library
          )
        }
      }
    }

  }

  object ProjectPatchForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      visibility = s"$prefix${sep}visibility",
      scms = s"$prefix${sep}scms",
      uri = s"$prefix${sep}uri"
    )

    def parser(
      name: String = "name",
      visibility: String = "visibility",
      scms: String = "scms",
      uri: String = "uri"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectPatchForm] = {
      SqlParser.str(name).? ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility).? ~
      com.bryzek.dependency.v0.anorm.parsers.Scms.parser(scms).? ~
      SqlParser.str(uri).? map {
        case name ~ visibility ~ scms ~ uri => {
          com.bryzek.dependency.v0.models.ProjectPatchForm(
            name = name,
            visibility = visibility,
            scms = scms,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      name = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.ProjectSummary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(name) map {
        case id ~ organization ~ name => {
          com.bryzek.dependency.v0.models.ProjectSummary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object Recommendation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      projectPrefix = s"$prefix${sep}project",
      `type` = s"$prefix${sep}type",
      objectPrefix = s"$prefix${sep}object",
      name = s"$prefix${sep}name",
      from = s"$prefix${sep}from",
      to = s"$prefix${sep}to",
      createdAt = s"$prefix${sep}created_at"
    )

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      `type`: String = "type",
      objectPrefix: String = "object",
      name: String = "name",
      from: String = "from",
      to: String = "to",
      createdAt: String = "created_at"
    ): RowParser[com.bryzek.dependency.v0.models.Recommendation] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(projectPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.RecommendationType.parser(`type`) ~
      com.bryzek.dependency.v0.anorm.parsers.Reference.parserWithPrefix(objectPrefix) ~
      SqlParser.str(name) ~
      SqlParser.str(from) ~
      SqlParser.str(to) ~
      SqlParser.get[_root_.org.joda.time.DateTime](createdAt) map {
        case id ~ project ~ typeInstance ~ objectInstance ~ name ~ from ~ to ~ createdAt => {
          com.bryzek.dependency.v0.models.Recommendation(
            id = id,
            project = project,
            `type` = typeInstance,
            `object` = objectInstance,
            name = name,
            from = from,
            to = to,
            createdAt = createdAt
          )
        }
      }
    }

  }

  object Reference {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[com.bryzek.dependency.v0.models.Reference] = {
      SqlParser.str(id) map {
        case id => {
          com.bryzek.dependency.v0.models.Reference(
            id = id
          )
        }
      }
    }

  }

  object Repository {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      visibility = s"$prefix${sep}visibility",
      uri = s"$prefix${sep}uri"
    )

    def parser(
      name: String = "name",
      visibility: String = "visibility",
      uri: String = "uri"
    ): RowParser[com.bryzek.dependency.v0.models.Repository] = {
      SqlParser.str(name) ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.str(uri) map {
        case name ~ visibility ~ uri => {
          com.bryzek.dependency.v0.models.Repository(
            name = name,
            visibility = visibility,
            uri = uri
          )
        }
      }
    }

  }

  object Resolver {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      visibility = s"$prefix${sep}visibility",
      organizationPrefix = s"$prefix${sep}organization",
      uri = s"$prefix${sep}uri",
      credentialsPrefix = s"$prefix${sep}credentials"
    )

    def parser(
      id: String = "id",
      visibility: String = "visibility",
      organizationPrefix: String = "organization",
      uri: String = "uri",
      credentialsPrefix: String = "credentials"
    ): RowParser[com.bryzek.dependency.v0.models.Resolver] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix).? ~
      SqlParser.str(uri) ~
      com.bryzek.dependency.v0.anorm.parsers.Credentials.parserWithPrefix(credentialsPrefix).? map {
        case id ~ visibility ~ organization ~ uri ~ credentials => {
          com.bryzek.dependency.v0.models.Resolver(
            id = id,
            visibility = visibility,
            organization = organization,
            uri = uri,
            credentials = credentials
          )
        }
      }
    }

  }

  object ResolverForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      visibility = s"$prefix${sep}visibility",
      organization = s"$prefix${sep}organization",
      uri = s"$prefix${sep}uri",
      credentialsPrefix = s"$prefix${sep}credentials"
    )

    def parser(
      visibility: String = "visibility",
      organization: String = "organization",
      uri: String = "uri",
      credentialsPrefix: String = "credentials"
    ): RowParser[com.bryzek.dependency.v0.models.ResolverForm] = {
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.str(organization) ~
      SqlParser.str(uri) ~
      com.bryzek.dependency.v0.anorm.parsers.Credentials.parserWithPrefix(credentialsPrefix).? map {
        case visibility ~ organization ~ uri ~ credentials => {
          com.bryzek.dependency.v0.models.ResolverForm(
            visibility = visibility,
            organization = organization,
            uri = uri,
            credentials = credentials
          )
        }
      }
    }

  }

  object ResolverSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      visibility = s"$prefix${sep}visibility",
      uri = s"$prefix${sep}uri"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      visibility: String = "visibility",
      uri: String = "uri"
    ): RowParser[com.bryzek.dependency.v0.models.ResolverSummary] = {
      SqlParser.str(id) ~
      com.bryzek.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix).? ~
      com.bryzek.dependency.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.str(uri) map {
        case id ~ organization ~ visibility ~ uri => {
          com.bryzek.dependency.v0.models.ResolverSummary(
            id = id,
            organization = organization,
            visibility = visibility,
            uri = uri
          )
        }
      }
    }

  }

  object Subscription {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      publication = s"$prefix${sep}publication"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      publication: String = "publication"
    ): RowParser[com.bryzek.dependency.v0.models.Subscription] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      com.bryzek.dependency.v0.anorm.parsers.Publication.parser(publication) map {
        case id ~ user ~ publication => {
          com.bryzek.dependency.v0.models.Subscription(
            id = id,
            user = user,
            publication = publication
          )
        }
      }
    }

  }

  object SubscriptionForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userId = s"$prefix${sep}user_id",
      publication = s"$prefix${sep}publication"
    )

    def parser(
      userId: String = "user_id",
      publication: String = "publication"
    ): RowParser[com.bryzek.dependency.v0.models.SubscriptionForm] = {
      SqlParser.str(userId) ~
      com.bryzek.dependency.v0.anorm.parsers.Publication.parser(publication) map {
        case userId ~ publication => {
          com.bryzek.dependency.v0.models.SubscriptionForm(
            userId = userId,
            publication = publication
          )
        }
      }
    }

  }

  object Sync {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      objectId = s"$prefix${sep}object_id",
      event = s"$prefix${sep}event",
      createdAt = s"$prefix${sep}created_at"
    )

    def parser(
      id: String = "id",
      objectId: String = "object_id",
      event: String = "event",
      createdAt: String = "created_at"
    ): RowParser[com.bryzek.dependency.v0.models.Sync] = {
      SqlParser.str(id) ~
      SqlParser.str(objectId) ~
      com.bryzek.dependency.v0.anorm.parsers.SyncEvent.parser(event) ~
      SqlParser.get[_root_.org.joda.time.DateTime](createdAt) map {
        case id ~ objectId ~ event ~ createdAt => {
          com.bryzek.dependency.v0.models.Sync(
            id = id,
            objectId = objectId,
            event = event,
            createdAt = createdAt
          )
        }
      }
    }

  }

  object Token {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      masked = s"$prefix${sep}masked",
      cleartext = s"$prefix${sep}cleartext",
      description = s"$prefix${sep}description"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      masked: String = "masked",
      cleartext: String = "cleartext",
      description: String = "description"
    ): RowParser[com.bryzek.dependency.v0.models.Token] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      SqlParser.str(masked) ~
      SqlParser.str(cleartext).? ~
      SqlParser.str(description).? map {
        case id ~ user ~ masked ~ cleartext ~ description => {
          com.bryzek.dependency.v0.models.Token(
            id = id,
            user = user,
            masked = masked,
            cleartext = cleartext,
            description = description
          )
        }
      }
    }

  }

  object TokenForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userId = s"$prefix${sep}user_id",
      description = s"$prefix${sep}description"
    )

    def parser(
      userId: String = "user_id",
      description: String = "description"
    ): RowParser[com.bryzek.dependency.v0.models.TokenForm] = {
      SqlParser.str(userId) ~
      SqlParser.str(description).? map {
        case userId ~ description => {
          com.bryzek.dependency.v0.models.TokenForm(
            userId = userId,
            description = description
          )
        }
      }
    }

  }

  object UserForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      email = s"$prefix${sep}email",
      namePrefix = s"$prefix${sep}name"
    )

    def parser(
      email: String = "email",
      namePrefix: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.UserForm] = {
      SqlParser.str(email).? ~
      io.flow.common.v0.anorm.parsers.Name.parserWithPrefix(namePrefix).? map {
        case email ~ name => {
          com.bryzek.dependency.v0.models.UserForm(
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UserIdentifier {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      userPrefix = s"$prefix${sep}user",
      value = s"$prefix${sep}value"
    )

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      value: String = "value"
    ): RowParser[com.bryzek.dependency.v0.models.UserIdentifier] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(userPrefix) ~
      SqlParser.str(value) map {
        case id ~ user ~ value => {
          com.bryzek.dependency.v0.models.UserIdentifier(
            id = id,
            user = user,
            value = value
          )
        }
      }
    }

  }

  object UserSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      email = s"$prefix${sep}email",
      namePrefix = s"$prefix${sep}name"
    )

    def parser(
      id: String = "id",
      email: String = "email",
      namePrefix: String = "name"
    ): RowParser[com.bryzek.dependency.v0.models.UserSummary] = {
      SqlParser.str(id) ~
      SqlParser.str(email).? ~
      io.flow.common.v0.anorm.parsers.Name.parserWithPrefix(namePrefix) map {
        case id ~ email ~ name => {
          com.bryzek.dependency.v0.models.UserSummary(
            id = id,
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UsernamePassword {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      username = s"$prefix${sep}username",
      password = s"$prefix${sep}password"
    )

    def parser(
      username: String = "username",
      password: String = "password"
    ): RowParser[com.bryzek.dependency.v0.models.UsernamePassword] = {
      SqlParser.str(username) ~
      SqlParser.str(password).? map {
        case username ~ password => {
          com.bryzek.dependency.v0.models.UsernamePassword(
            username = username,
            password = password
          )
        }
      }
    }

  }

  object VersionForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      version = s"$prefix${sep}version",
      crossBuildVersion = s"$prefix${sep}cross_build_version"
    )

    def parser(
      version: String = "version",
      crossBuildVersion: String = "cross_build_version"
    ): RowParser[com.bryzek.dependency.v0.models.VersionForm] = {
      SqlParser.str(version) ~
      SqlParser.str(crossBuildVersion).? map {
        case version ~ crossBuildVersion => {
          com.bryzek.dependency.v0.models.VersionForm(
            version = version,
            crossBuildVersion = crossBuildVersion
          )
        }
      }
    }

  }

  object Credentials {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      com.bryzek.dependency.v0.anorm.parsers.UsernamePassword.parserWithPrefix(prefix, sep)
    }

    def parser() = {
      com.bryzek.dependency.v0.anorm.parsers.UsernamePassword.parser()
    }

  }

  object ItemSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      com.bryzek.dependency.v0.anorm.parsers.BinarySummary.parserWithPrefix(prefix, sep) |
      com.bryzek.dependency.v0.anorm.parsers.LibrarySummary.parserWithPrefix(prefix, sep) |
      com.bryzek.dependency.v0.anorm.parsers.ProjectSummary.parserWithPrefix(prefix, sep)
    }

    def parser() = {
      com.bryzek.dependency.v0.anorm.parsers.BinarySummary.parser() |
      com.bryzek.dependency.v0.anorm.parsers.LibrarySummary.parser() |
      com.bryzek.dependency.v0.anorm.parsers.ProjectSummary.parser()
    }

  }

}