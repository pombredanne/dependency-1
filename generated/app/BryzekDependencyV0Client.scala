/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.2-dev
 * apidoc:0.9.50 http://localhost:9000/bryzek/dependency/0.0.2-dev/play_2_4_client
 */
package com.bryzek.dependency.v0.models {

  sealed trait Credentials

  sealed trait ItemSummary

  case class Binary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    name: com.bryzek.dependency.v0.models.BinaryType,
    audit: io.flow.common.v0.models.Audit
  )

  case class BinaryForm(
    organizationGuid: _root_.java.util.UUID,
    name: String,
    version: String
  )

  case class BinaryRecommendation(
    from: com.bryzek.dependency.v0.models.BinaryVersion,
    to: com.bryzek.dependency.v0.models.BinaryVersion,
    latest: com.bryzek.dependency.v0.models.BinaryVersion
  )

  case class BinarySummary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    name: com.bryzek.dependency.v0.models.BinaryType
  ) extends ItemSummary

  case class BinaryVersion(
    guid: _root_.java.util.UUID,
    binary: com.bryzek.dependency.v0.models.Binary,
    version: String,
    audit: io.flow.common.v0.models.Audit
  )

  /**
   * Used to authenticate user based on the oauth code we receive from github
   */
  case class GithubAuthenticationForm(
    code: String
  )

  case class GithubUser(
    guid: _root_.java.util.UUID,
    user: io.flow.common.v0.models.Reference,
    id: Long,
    login: String,
    audit: io.flow.common.v0.models.Audit
  )

  case class GithubUserForm(
    userGuid: _root_.java.util.UUID,
    id: Long,
    login: String
  )

  /**
   * A denormalization of item content for search
   */
  case class Item(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    summary: com.bryzek.dependency.v0.models.ItemSummary,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  case class Library(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    groupId: String,
    artifactId: String,
    resolver: _root_.scala.Option[com.bryzek.dependency.v0.models.ResolverSummary] = None,
    audit: io.flow.common.v0.models.Audit
  )

  case class LibraryForm(
    organizationGuid: _root_.java.util.UUID,
    groupId: String,
    artifactId: String,
    resolverGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
    version: _root_.scala.Option[com.bryzek.dependency.v0.models.VersionForm] = None
  )

  case class LibraryRecommendation(
    from: com.bryzek.dependency.v0.models.LibraryVersion,
    to: com.bryzek.dependency.v0.models.LibraryVersion,
    latest: com.bryzek.dependency.v0.models.LibraryVersion
  )

  case class LibrarySummary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    groupId: String,
    artifactId: String
  ) extends ItemSummary

  case class LibraryVersion(
    guid: _root_.java.util.UUID,
    library: com.bryzek.dependency.v0.models.Library,
    version: String,
    crossBuildVersion: _root_.scala.Option[String] = None,
    audit: io.flow.common.v0.models.Audit
  )

  /**
   * A user can belong to one or more organizations via memberships.
   */
  case class Membership(
    guid: _root_.java.util.UUID,
    user: com.bryzek.dependency.v0.models.UserSummary,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    role: com.bryzek.dependency.v0.models.Role,
    audit: io.flow.common.v0.models.Audit
  )

  case class MembershipForm(
    userGuid: _root_.java.util.UUID,
    organizationGuid: _root_.java.util.UUID,
    role: com.bryzek.dependency.v0.models.Role = com.bryzek.dependency.v0.models.Role("member")
  )

  case class Organization(
    guid: _root_.java.util.UUID,
    key: String,
    audit: io.flow.common.v0.models.Audit
  )

  case class OrganizationForm(
    key: String
  )

  case class OrganizationSummary(
    guid: _root_.java.util.UUID,
    key: String
  )

  case class Project(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    scms: com.bryzek.dependency.v0.models.Scms,
    name: String,
    uri: String,
    audit: io.flow.common.v0.models.Audit
  )

  /**
   * A projection of projects and the specific binary versions the project is
   * dependent on
   */
  case class ProjectBinaryVersion(
    project: com.bryzek.dependency.v0.models.Project,
    binaryVersion: com.bryzek.dependency.v0.models.BinaryVersion
  )

  case class ProjectDetail(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    name: String
  )

  case class ProjectForm(
    organizationGuid: _root_.java.util.UUID,
    name: String,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    scms: com.bryzek.dependency.v0.models.Scms,
    uri: String
  )

  /**
   * A projection of projects and the specific library versions the project is
   * dependent on
   */
  case class ProjectLibraryVersion(
    project: com.bryzek.dependency.v0.models.Project,
    libraryVersion: com.bryzek.dependency.v0.models.LibraryVersion
  )

  case class ProjectPatchForm(
    name: _root_.scala.Option[String] = None,
    visibility: _root_.scala.Option[com.bryzek.dependency.v0.models.Visibility] = None,
    scms: _root_.scala.Option[com.bryzek.dependency.v0.models.Scms] = None,
    uri: _root_.scala.Option[String] = None
  )

  case class ProjectSummary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.dependency.v0.models.OrganizationSummary,
    name: String
  ) extends ItemSummary

  /**
   * Summary of a specific recommendations for a project. Designed for display in the
   * project dashboard
   */
  case class Recommendation(
    guid: _root_.java.util.UUID,
    project: com.bryzek.dependency.v0.models.ProjectDetail,
    `type`: com.bryzek.dependency.v0.models.RecommendationType,
    `object`: io.flow.common.v0.models.Reference,
    name: String,
    from: String,
    to: String,
    audit: io.flow.common.v0.models.Audit
  )

  case class Repository(
    name: String,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    uri: String
  )

  case class Resolver(
    guid: _root_.java.util.UUID,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    organization: _root_.scala.Option[com.bryzek.dependency.v0.models.OrganizationSummary] = None,
    uri: String,
    credentials: _root_.scala.Option[com.bryzek.dependency.v0.models.Credentials] = None,
    audit: io.flow.common.v0.models.Audit
  )

  case class ResolverForm(
    visibility: com.bryzek.dependency.v0.models.Visibility,
    organizationGuid: _root_.java.util.UUID,
    uri: String,
    credentials: _root_.scala.Option[com.bryzek.dependency.v0.models.Credentials] = None
  )

  case class ResolverSummary(
    guid: _root_.java.util.UUID,
    organization: _root_.scala.Option[com.bryzek.dependency.v0.models.OrganizationSummary] = None,
    visibility: com.bryzek.dependency.v0.models.Visibility,
    uri: String
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    guid: _root_.java.util.UUID,
    user: io.flow.common.v0.models.Reference,
    publication: com.bryzek.dependency.v0.models.Publication,
    audit: io.flow.common.v0.models.Audit
  )

  case class SubscriptionForm(
    userGuid: _root_.java.util.UUID,
    publication: com.bryzek.dependency.v0.models.Publication
  )

  /**
   * Records when we start and complete each sync of a module (e.g. project)
   */
  case class Sync(
    guid: _root_.java.util.UUID,
    event: com.bryzek.dependency.v0.models.SyncEvent,
    audit: io.flow.common.v0.models.Audit
  )

  case class Token(
    guid: _root_.java.util.UUID,
    user: io.flow.common.v0.models.Reference,
    tag: String,
    token: String,
    audit: io.flow.common.v0.models.Audit
  )

  case class TokenForm(
    userGuid: _root_.java.util.UUID,
    tag: String,
    token: String
  )

  case class UserSummary(
    guid: _root_.java.util.UUID,
    email: _root_.scala.Option[String] = None,
    name: io.flow.user.v0.models.Name
  )

  case class UsernamePassword(
    username: String,
    password: _root_.scala.Option[String] = None
  ) extends Credentials

  case class VersionForm(
    version: String,
    crossBuildVersion: _root_.scala.Option[String] = None
  )

  case class WatchProject(
    guid: _root_.java.util.UUID,
    user: io.flow.common.v0.models.Reference,
    project: com.bryzek.dependency.v0.models.Project,
    audit: io.flow.common.v0.models.Audit
  )

  case class WatchProjectForm(
    userGuid: _root_.java.util.UUID,
    projectGuid: _root_.java.util.UUID
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Credentials, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class CredentialsUndefinedType(
    description: String
  ) extends Credentials

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemSummary, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ItemSummaryUndefinedType(
    description: String
  ) extends ItemSummary

  sealed trait BinaryType

  object BinaryType {

    /**
     * See http://www.scala-lang.org/
     */
    case object Scala extends BinaryType { override def toString = "scala" }
    /**
     * See http://www.scala-sbt.org/
     */
    case object Sbt extends BinaryType { override def toString = "sbt" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends BinaryType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Scala, Sbt)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): BinaryType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[BinaryType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to.
   */
  sealed trait Publication

  object Publication {

    /**
     * A daily summary of dependencies that can be upgraded
     */
    case object DailySummary extends Publication { override def toString = "daily_summary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(DailySummary)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait RecommendationType

  object RecommendationType {

    case object Library extends RecommendationType { override def toString = "library" }
    case object Binary extends RecommendationType { override def toString = "binary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends RecommendationType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Library, Binary)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RecommendationType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RecommendationType] = byName.get(value.toLowerCase)

  }

  sealed trait Role

  object Role {

    case object Member extends Role { override def toString = "member" }
    case object Admin extends Role { override def toString = "admin" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Role

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Member, Admin)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Role = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Role] = byName.get(value.toLowerCase)

  }

  sealed trait Scms

  object Scms {

    case object Github extends Scms { override def toString = "github" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Scms

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Github)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Scms = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Scms] = byName.get(value.toLowerCase)

  }

  sealed trait SyncEvent

  object SyncEvent {

    case object Started extends SyncEvent { override def toString = "started" }
    case object Completed extends SyncEvent { override def toString = "completed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends SyncEvent

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Started, Completed)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SyncEvent = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SyncEvent] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Private)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.dependency.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.dependency.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.user.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsDependencyBinaryType = __.read[String].map(BinaryType.apply)
    implicit val jsonWritesDependencyBinaryType = new Writes[BinaryType] {
      def writes(x: BinaryType) = JsString(x.toString)
    }

    implicit val jsonReadsDependencyPublication = __.read[String].map(Publication.apply)
    implicit val jsonWritesDependencyPublication = new Writes[Publication] {
      def writes(x: Publication) = JsString(x.toString)
    }

    implicit val jsonReadsDependencyRecommendationType = __.read[String].map(RecommendationType.apply)
    implicit val jsonWritesDependencyRecommendationType = new Writes[RecommendationType] {
      def writes(x: RecommendationType) = JsString(x.toString)
    }

    implicit val jsonReadsDependencyRole = __.read[String].map(Role.apply)
    implicit val jsonWritesDependencyRole = new Writes[Role] {
      def writes(x: Role) = JsString(x.toString)
    }

    implicit val jsonReadsDependencyScms = __.read[String].map(Scms.apply)
    implicit val jsonWritesDependencyScms = new Writes[Scms] {
      def writes(x: Scms) = JsString(x.toString)
    }

    implicit val jsonReadsDependencySyncEvent = __.read[String].map(SyncEvent.apply)
    implicit val jsonWritesDependencySyncEvent = new Writes[SyncEvent] {
      def writes(x: SyncEvent) = JsString(x.toString)
    }

    implicit val jsonReadsDependencyVisibility = __.read[String].map(Visibility.apply)
    implicit val jsonWritesDependencyVisibility = new Writes[Visibility] {
      def writes(x: Visibility) = JsString(x.toString)
    }

    implicit def jsonReadsDependencyBinary: play.api.libs.json.Reads[Binary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").read[com.bryzek.dependency.v0.models.BinaryType] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Binary.apply _)
    }

    implicit def jsonWritesDependencyBinary: play.api.libs.json.Writes[Binary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").write[com.bryzek.dependency.v0.models.BinaryType] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Binary.unapply _))
    }

    implicit def jsonReadsDependencyBinaryForm: play.api.libs.json.Reads[BinaryForm] = {
      (
        (__ \ "organization_guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String] and
        (__ \ "version").read[String]
      )(BinaryForm.apply _)
    }

    implicit def jsonWritesDependencyBinaryForm: play.api.libs.json.Writes[BinaryForm] = {
      (
        (__ \ "organization_guid").write[_root_.java.util.UUID] and
        (__ \ "name").write[String] and
        (__ \ "version").write[String]
      )(unlift(BinaryForm.unapply _))
    }

    implicit def jsonReadsDependencyBinaryRecommendation: play.api.libs.json.Reads[BinaryRecommendation] = {
      (
        (__ \ "from").read[com.bryzek.dependency.v0.models.BinaryVersion] and
        (__ \ "to").read[com.bryzek.dependency.v0.models.BinaryVersion] and
        (__ \ "latest").read[com.bryzek.dependency.v0.models.BinaryVersion]
      )(BinaryRecommendation.apply _)
    }

    implicit def jsonWritesDependencyBinaryRecommendation: play.api.libs.json.Writes[BinaryRecommendation] = {
      (
        (__ \ "from").write[com.bryzek.dependency.v0.models.BinaryVersion] and
        (__ \ "to").write[com.bryzek.dependency.v0.models.BinaryVersion] and
        (__ \ "latest").write[com.bryzek.dependency.v0.models.BinaryVersion]
      )(unlift(BinaryRecommendation.unapply _))
    }

    implicit def jsonReadsDependencyBinarySummary: play.api.libs.json.Reads[BinarySummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").read[com.bryzek.dependency.v0.models.BinaryType]
      )(BinarySummary.apply _)
    }

    implicit def jsonWritesDependencyBinarySummary: play.api.libs.json.Writes[BinarySummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").write[com.bryzek.dependency.v0.models.BinaryType]
      )(unlift(BinarySummary.unapply _))
    }

    implicit def jsonReadsDependencyBinaryVersion: play.api.libs.json.Reads[BinaryVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "binary").read[com.bryzek.dependency.v0.models.Binary] and
        (__ \ "version").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(BinaryVersion.apply _)
    }

    implicit def jsonWritesDependencyBinaryVersion: play.api.libs.json.Writes[BinaryVersion] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "binary").write[com.bryzek.dependency.v0.models.Binary] and
        (__ \ "version").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(BinaryVersion.unapply _))
    }

    implicit def jsonReadsDependencyGithubAuthenticationForm: play.api.libs.json.Reads[GithubAuthenticationForm] = {
      (__ \ "code").read[String].map { x => new GithubAuthenticationForm(code = x) }
    }

    implicit def jsonWritesDependencyGithubAuthenticationForm: play.api.libs.json.Writes[GithubAuthenticationForm] = new play.api.libs.json.Writes[GithubAuthenticationForm] {
      def writes(x: GithubAuthenticationForm) = play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.Json.toJson(x.code)
      )
    }

    implicit def jsonReadsDependencyGithubUser: play.api.libs.json.Reads[GithubUser] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.flow.common.v0.models.Reference] and
        (__ \ "id").read[Long] and
        (__ \ "login").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(GithubUser.apply _)
    }

    implicit def jsonWritesDependencyGithubUser: play.api.libs.json.Writes[GithubUser] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user").write[io.flow.common.v0.models.Reference] and
        (__ \ "id").write[Long] and
        (__ \ "login").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(GithubUser.unapply _))
    }

    implicit def jsonReadsDependencyGithubUserForm: play.api.libs.json.Reads[GithubUserForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "id").read[Long] and
        (__ \ "login").read[String]
      )(GithubUserForm.apply _)
    }

    implicit def jsonWritesDependencyGithubUserForm: play.api.libs.json.Writes[GithubUserForm] = {
      (
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "id").write[Long] and
        (__ \ "login").write[String]
      )(unlift(GithubUserForm.unapply _))
    }

    implicit def jsonReadsDependencyItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "summary").read[com.bryzek.dependency.v0.models.ItemSummary] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    implicit def jsonWritesDependencyItem: play.api.libs.json.Writes[Item] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "summary").write[com.bryzek.dependency.v0.models.ItemSummary] and
        (__ \ "label").write[String] and
        (__ \ "description").writeNullable[String]
      )(unlift(Item.unapply _))
    }

    implicit def jsonReadsDependencyLibrary: play.api.libs.json.Reads[Library] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "group_id").read[String] and
        (__ \ "artifact_id").read[String] and
        (__ \ "resolver").readNullable[com.bryzek.dependency.v0.models.ResolverSummary] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Library.apply _)
    }

    implicit def jsonWritesDependencyLibrary: play.api.libs.json.Writes[Library] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "group_id").write[String] and
        (__ \ "artifact_id").write[String] and
        (__ \ "resolver").writeNullable[com.bryzek.dependency.v0.models.ResolverSummary] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Library.unapply _))
    }

    implicit def jsonReadsDependencyLibraryForm: play.api.libs.json.Reads[LibraryForm] = {
      (
        (__ \ "organization_guid").read[_root_.java.util.UUID] and
        (__ \ "group_id").read[String] and
        (__ \ "artifact_id").read[String] and
        (__ \ "resolver_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "version").readNullable[com.bryzek.dependency.v0.models.VersionForm]
      )(LibraryForm.apply _)
    }

    implicit def jsonWritesDependencyLibraryForm: play.api.libs.json.Writes[LibraryForm] = {
      (
        (__ \ "organization_guid").write[_root_.java.util.UUID] and
        (__ \ "group_id").write[String] and
        (__ \ "artifact_id").write[String] and
        (__ \ "resolver_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "version").writeNullable[com.bryzek.dependency.v0.models.VersionForm]
      )(unlift(LibraryForm.unapply _))
    }

    implicit def jsonReadsDependencyLibraryRecommendation: play.api.libs.json.Reads[LibraryRecommendation] = {
      (
        (__ \ "from").read[com.bryzek.dependency.v0.models.LibraryVersion] and
        (__ \ "to").read[com.bryzek.dependency.v0.models.LibraryVersion] and
        (__ \ "latest").read[com.bryzek.dependency.v0.models.LibraryVersion]
      )(LibraryRecommendation.apply _)
    }

    implicit def jsonWritesDependencyLibraryRecommendation: play.api.libs.json.Writes[LibraryRecommendation] = {
      (
        (__ \ "from").write[com.bryzek.dependency.v0.models.LibraryVersion] and
        (__ \ "to").write[com.bryzek.dependency.v0.models.LibraryVersion] and
        (__ \ "latest").write[com.bryzek.dependency.v0.models.LibraryVersion]
      )(unlift(LibraryRecommendation.unapply _))
    }

    implicit def jsonReadsDependencyLibrarySummary: play.api.libs.json.Reads[LibrarySummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "group_id").read[String] and
        (__ \ "artifact_id").read[String]
      )(LibrarySummary.apply _)
    }

    implicit def jsonWritesDependencyLibrarySummary: play.api.libs.json.Writes[LibrarySummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "group_id").write[String] and
        (__ \ "artifact_id").write[String]
      )(unlift(LibrarySummary.unapply _))
    }

    implicit def jsonReadsDependencyLibraryVersion: play.api.libs.json.Reads[LibraryVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "library").read[com.bryzek.dependency.v0.models.Library] and
        (__ \ "version").read[String] and
        (__ \ "cross_build_version").readNullable[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(LibraryVersion.apply _)
    }

    implicit def jsonWritesDependencyLibraryVersion: play.api.libs.json.Writes[LibraryVersion] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "library").write[com.bryzek.dependency.v0.models.Library] and
        (__ \ "version").write[String] and
        (__ \ "cross_build_version").writeNullable[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(LibraryVersion.unapply _))
    }

    implicit def jsonReadsDependencyMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.dependency.v0.models.UserSummary] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "role").read[com.bryzek.dependency.v0.models.Role] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Membership.apply _)
    }

    implicit def jsonWritesDependencyMembership: play.api.libs.json.Writes[Membership] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user").write[com.bryzek.dependency.v0.models.UserSummary] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "role").write[com.bryzek.dependency.v0.models.Role] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Membership.unapply _))
    }

    implicit def jsonReadsDependencyMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "organization_guid").read[_root_.java.util.UUID] and
        (__ \ "role").read[com.bryzek.dependency.v0.models.Role]
      )(MembershipForm.apply _)
    }

    implicit def jsonWritesDependencyMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      (
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "organization_guid").write[_root_.java.util.UUID] and
        (__ \ "role").write[com.bryzek.dependency.v0.models.Role]
      )(unlift(MembershipForm.unapply _))
    }

    implicit def jsonReadsDependencyOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Organization.apply _)
    }

    implicit def jsonWritesDependencyOrganization: play.api.libs.json.Writes[Organization] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "key").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Organization.unapply _))
    }

    implicit def jsonReadsDependencyOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (__ \ "key").read[String].map { x => new OrganizationForm(key = x) }
    }

    implicit def jsonWritesDependencyOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = new play.api.libs.json.Writes[OrganizationForm] {
      def writes(x: OrganizationForm) = play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.Json.toJson(x.key)
      )
    }

    implicit def jsonReadsDependencyOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String]
      )(OrganizationSummary.apply _)
    }

    implicit def jsonWritesDependencyOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "key").write[String]
      )(unlift(OrganizationSummary.unapply _))
    }

    implicit def jsonReadsDependencyProject: play.api.libs.json.Reads[Project] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").read[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "name").read[String] and
        (__ \ "uri").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Project.apply _)
    }

    implicit def jsonWritesDependencyProject: play.api.libs.json.Writes[Project] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").write[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "name").write[String] and
        (__ \ "uri").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Project.unapply _))
    }

    implicit def jsonReadsDependencyProjectBinaryVersion: play.api.libs.json.Reads[ProjectBinaryVersion] = {
      (
        (__ \ "project").read[com.bryzek.dependency.v0.models.Project] and
        (__ \ "binary_version").read[com.bryzek.dependency.v0.models.BinaryVersion]
      )(ProjectBinaryVersion.apply _)
    }

    implicit def jsonWritesDependencyProjectBinaryVersion: play.api.libs.json.Writes[ProjectBinaryVersion] = {
      (
        (__ \ "project").write[com.bryzek.dependency.v0.models.Project] and
        (__ \ "binary_version").write[com.bryzek.dependency.v0.models.BinaryVersion]
      )(unlift(ProjectBinaryVersion.unapply _))
    }

    implicit def jsonReadsDependencyProjectDetail: play.api.libs.json.Reads[ProjectDetail] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").read[String]
      )(ProjectDetail.apply _)
    }

    implicit def jsonWritesDependencyProjectDetail: play.api.libs.json.Writes[ProjectDetail] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").write[String]
      )(unlift(ProjectDetail.unapply _))
    }

    implicit def jsonReadsDependencyProjectForm: play.api.libs.json.Reads[ProjectForm] = {
      (
        (__ \ "organization_guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").read[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "uri").read[String]
      )(ProjectForm.apply _)
    }

    implicit def jsonWritesDependencyProjectForm: play.api.libs.json.Writes[ProjectForm] = {
      (
        (__ \ "organization_guid").write[_root_.java.util.UUID] and
        (__ \ "name").write[String] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").write[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "uri").write[String]
      )(unlift(ProjectForm.unapply _))
    }

    implicit def jsonReadsDependencyProjectLibraryVersion: play.api.libs.json.Reads[ProjectLibraryVersion] = {
      (
        (__ \ "project").read[com.bryzek.dependency.v0.models.Project] and
        (__ \ "library_version").read[com.bryzek.dependency.v0.models.LibraryVersion]
      )(ProjectLibraryVersion.apply _)
    }

    implicit def jsonWritesDependencyProjectLibraryVersion: play.api.libs.json.Writes[ProjectLibraryVersion] = {
      (
        (__ \ "project").write[com.bryzek.dependency.v0.models.Project] and
        (__ \ "library_version").write[com.bryzek.dependency.v0.models.LibraryVersion]
      )(unlift(ProjectLibraryVersion.unapply _))
    }

    implicit def jsonReadsDependencyProjectPatchForm: play.api.libs.json.Reads[ProjectPatchForm] = {
      (
        (__ \ "name").readNullable[String] and
        (__ \ "visibility").readNullable[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").readNullable[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "uri").readNullable[String]
      )(ProjectPatchForm.apply _)
    }

    implicit def jsonWritesDependencyProjectPatchForm: play.api.libs.json.Writes[ProjectPatchForm] = {
      (
        (__ \ "name").writeNullable[String] and
        (__ \ "visibility").writeNullable[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "scms").writeNullable[com.bryzek.dependency.v0.models.Scms] and
        (__ \ "uri").writeNullable[String]
      )(unlift(ProjectPatchForm.unapply _))
    }

    implicit def jsonReadsDependencyProjectSummary: play.api.libs.json.Reads[ProjectSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").read[String]
      )(ProjectSummary.apply _)
    }

    implicit def jsonWritesDependencyProjectSummary: play.api.libs.json.Writes[ProjectSummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "name").write[String]
      )(unlift(ProjectSummary.unapply _))
    }

    implicit def jsonReadsDependencyRecommendation: play.api.libs.json.Reads[Recommendation] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "project").read[com.bryzek.dependency.v0.models.ProjectDetail] and
        (__ \ "type").read[com.bryzek.dependency.v0.models.RecommendationType] and
        (__ \ "object").read[io.flow.common.v0.models.Reference] and
        (__ \ "name").read[String] and
        (__ \ "from").read[String] and
        (__ \ "to").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Recommendation.apply _)
    }

    implicit def jsonWritesDependencyRecommendation: play.api.libs.json.Writes[Recommendation] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "project").write[com.bryzek.dependency.v0.models.ProjectDetail] and
        (__ \ "type").write[com.bryzek.dependency.v0.models.RecommendationType] and
        (__ \ "object").write[io.flow.common.v0.models.Reference] and
        (__ \ "name").write[String] and
        (__ \ "from").write[String] and
        (__ \ "to").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Recommendation.unapply _))
    }

    implicit def jsonReadsDependencyRepository: play.api.libs.json.Reads[Repository] = {
      (
        (__ \ "name").read[String] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "uri").read[String]
      )(Repository.apply _)
    }

    implicit def jsonWritesDependencyRepository: play.api.libs.json.Writes[Repository] = {
      (
        (__ \ "name").write[String] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "uri").write[String]
      )(unlift(Repository.unapply _))
    }

    implicit def jsonReadsDependencyResolver: play.api.libs.json.Reads[Resolver] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "organization").readNullable[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "uri").read[String] and
        (__ \ "credentials").readNullable[com.bryzek.dependency.v0.models.Credentials] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Resolver.apply _)
    }

    implicit def jsonWritesDependencyResolver: play.api.libs.json.Writes[Resolver] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "organization").writeNullable[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "uri").write[String] and
        (__ \ "credentials").writeNullable[com.bryzek.dependency.v0.models.Credentials] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Resolver.unapply _))
    }

    implicit def jsonReadsDependencyResolverForm: play.api.libs.json.Reads[ResolverForm] = {
      (
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "organization_guid").read[_root_.java.util.UUID] and
        (__ \ "uri").read[String] and
        (__ \ "credentials").readNullable[com.bryzek.dependency.v0.models.Credentials]
      )(ResolverForm.apply _)
    }

    implicit def jsonWritesDependencyResolverForm: play.api.libs.json.Writes[ResolverForm] = {
      (
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "organization_guid").write[_root_.java.util.UUID] and
        (__ \ "uri").write[String] and
        (__ \ "credentials").writeNullable[com.bryzek.dependency.v0.models.Credentials]
      )(unlift(ResolverForm.unapply _))
    }

    implicit def jsonReadsDependencyResolverSummary: play.api.libs.json.Reads[ResolverSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").readNullable[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").read[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "uri").read[String]
      )(ResolverSummary.apply _)
    }

    implicit def jsonWritesDependencyResolverSummary: play.api.libs.json.Writes[ResolverSummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").writeNullable[com.bryzek.dependency.v0.models.OrganizationSummary] and
        (__ \ "visibility").write[com.bryzek.dependency.v0.models.Visibility] and
        (__ \ "uri").write[String]
      )(unlift(ResolverSummary.unapply _))
    }

    implicit def jsonReadsDependencySubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.flow.common.v0.models.Reference] and
        (__ \ "publication").read[com.bryzek.dependency.v0.models.Publication] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Subscription.apply _)
    }

    implicit def jsonWritesDependencySubscription: play.api.libs.json.Writes[Subscription] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user").write[io.flow.common.v0.models.Reference] and
        (__ \ "publication").write[com.bryzek.dependency.v0.models.Publication] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Subscription.unapply _))
    }

    implicit def jsonReadsDependencySubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "publication").read[com.bryzek.dependency.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    implicit def jsonWritesDependencySubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      (
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "publication").write[com.bryzek.dependency.v0.models.Publication]
      )(unlift(SubscriptionForm.unapply _))
    }

    implicit def jsonReadsDependencySync: play.api.libs.json.Reads[Sync] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "event").read[com.bryzek.dependency.v0.models.SyncEvent] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Sync.apply _)
    }

    implicit def jsonWritesDependencySync: play.api.libs.json.Writes[Sync] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "event").write[com.bryzek.dependency.v0.models.SyncEvent] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Sync.unapply _))
    }

    implicit def jsonReadsDependencyToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.flow.common.v0.models.Reference] and
        (__ \ "tag").read[String] and
        (__ \ "token").read[String] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(Token.apply _)
    }

    implicit def jsonWritesDependencyToken: play.api.libs.json.Writes[Token] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user").write[io.flow.common.v0.models.Reference] and
        (__ \ "tag").write[String] and
        (__ \ "token").write[String] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(Token.unapply _))
    }

    implicit def jsonReadsDependencyTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "tag").read[String] and
        (__ \ "token").read[String]
      )(TokenForm.apply _)
    }

    implicit def jsonWritesDependencyTokenForm: play.api.libs.json.Writes[TokenForm] = {
      (
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "tag").write[String] and
        (__ \ "token").write[String]
      )(unlift(TokenForm.unapply _))
    }

    implicit def jsonReadsDependencyUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.user.v0.models.Name]
      )(UserSummary.apply _)
    }

    implicit def jsonWritesDependencyUserSummary: play.api.libs.json.Writes[UserSummary] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "email").writeNullable[String] and
        (__ \ "name").write[io.flow.user.v0.models.Name]
      )(unlift(UserSummary.unapply _))
    }

    implicit def jsonReadsDependencyUsernamePassword: play.api.libs.json.Reads[UsernamePassword] = {
      (
        (__ \ "username").read[String] and
        (__ \ "password").readNullable[String]
      )(UsernamePassword.apply _)
    }

    implicit def jsonWritesDependencyUsernamePassword: play.api.libs.json.Writes[UsernamePassword] = {
      (
        (__ \ "username").write[String] and
        (__ \ "password").writeNullable[String]
      )(unlift(UsernamePassword.unapply _))
    }

    implicit def jsonReadsDependencyVersionForm: play.api.libs.json.Reads[VersionForm] = {
      (
        (__ \ "version").read[String] and
        (__ \ "cross_build_version").readNullable[String]
      )(VersionForm.apply _)
    }

    implicit def jsonWritesDependencyVersionForm: play.api.libs.json.Writes[VersionForm] = {
      (
        (__ \ "version").write[String] and
        (__ \ "cross_build_version").writeNullable[String]
      )(unlift(VersionForm.unapply _))
    }

    implicit def jsonReadsDependencyWatchProject: play.api.libs.json.Reads[WatchProject] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.flow.common.v0.models.Reference] and
        (__ \ "project").read[com.bryzek.dependency.v0.models.Project] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(WatchProject.apply _)
    }

    implicit def jsonWritesDependencyWatchProject: play.api.libs.json.Writes[WatchProject] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user").write[io.flow.common.v0.models.Reference] and
        (__ \ "project").write[com.bryzek.dependency.v0.models.Project] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(WatchProject.unapply _))
    }

    implicit def jsonReadsDependencyWatchProjectForm: play.api.libs.json.Reads[WatchProjectForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "project_guid").read[_root_.java.util.UUID]
      )(WatchProjectForm.apply _)
    }

    implicit def jsonWritesDependencyWatchProjectForm: play.api.libs.json.Writes[WatchProjectForm] = {
      (
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "project_guid").write[_root_.java.util.UUID]
      )(unlift(WatchProjectForm.unapply _))
    }

    implicit def jsonReadsDependencyCredentials: play.api.libs.json.Reads[Credentials] = {
      (
        (__ \ "username_password").read(jsonReadsDependencyUsernamePassword).asInstanceOf[play.api.libs.json.Reads[Credentials]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(com.bryzek.dependency.v0.models.CredentialsUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[Credentials]]
      )
    }

    implicit def jsonWritesDependencyCredentials: play.api.libs.json.Writes[Credentials] = new play.api.libs.json.Writes[Credentials] {
      def writes(obj: Credentials) = obj match {
        case x: com.bryzek.dependency.v0.models.UsernamePassword => play.api.libs.json.Json.obj("username_password" -> jsonWritesDependencyUsernamePassword.writes(x))
        case x: com.bryzek.dependency.v0.models.CredentialsUndefinedType => sys.error(s"The type[com.bryzek.dependency.v0.models.CredentialsUndefinedType] should never be serialized")
      }
    }

    implicit def jsonReadsDependencyItemSummary: play.api.libs.json.Reads[ItemSummary] = {
      (
        (__ \ "binary_summary").read(jsonReadsDependencyBinarySummary).asInstanceOf[play.api.libs.json.Reads[ItemSummary]]
        orElse
        (__ \ "library_summary").read(jsonReadsDependencyLibrarySummary).asInstanceOf[play.api.libs.json.Reads[ItemSummary]]
        orElse
        (__ \ "project_summary").read(jsonReadsDependencyProjectSummary).asInstanceOf[play.api.libs.json.Reads[ItemSummary]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(com.bryzek.dependency.v0.models.ItemSummaryUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[ItemSummary]]
      )
    }

    implicit def jsonWritesDependencyItemSummary: play.api.libs.json.Writes[ItemSummary] = new play.api.libs.json.Writes[ItemSummary] {
      def writes(obj: ItemSummary) = obj match {
        case x: com.bryzek.dependency.v0.models.BinarySummary => play.api.libs.json.Json.obj("binary_summary" -> jsonWritesDependencyBinarySummary.writes(x))
        case x: com.bryzek.dependency.v0.models.LibrarySummary => play.api.libs.json.Json.obj("library_summary" -> jsonWritesDependencyLibrarySummary.writes(x))
        case x: com.bryzek.dependency.v0.models.ProjectSummary => play.api.libs.json.Json.obj("project_summary" -> jsonWritesDependencyProjectSummary.writes(x))
        case x: com.bryzek.dependency.v0.models.ItemSummaryUndefinedType => sys.error(s"The type[com.bryzek.dependency.v0.models.ItemSummaryUndefinedType] should never be serialized")
      }
    }
  }
}

package com.bryzek.dependency.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.bryzek.dependency.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: BinaryType
    private[this] val enumBinaryTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.BinaryType.all.mkString(", ")}"

    implicit val pathBindableEnumBinaryType = new PathBindable.Parsing[com.bryzek.dependency.v0.models.BinaryType] (
      BinaryType.fromString(_).get, _.toString, enumBinaryTypeNotFound
    )

    implicit val queryStringBindableEnumBinaryType = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.BinaryType](
      BinaryType.fromString(_).get, _.toString, enumBinaryTypeNotFound
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[com.bryzek.dependency.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    // Enum: RecommendationType
    private[this] val enumRecommendationTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.RecommendationType.all.mkString(", ")}"

    implicit val pathBindableEnumRecommendationType = new PathBindable.Parsing[com.bryzek.dependency.v0.models.RecommendationType] (
      RecommendationType.fromString(_).get, _.toString, enumRecommendationTypeNotFound
    )

    implicit val queryStringBindableEnumRecommendationType = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.RecommendationType](
      RecommendationType.fromString(_).get, _.toString, enumRecommendationTypeNotFound
    )

    // Enum: Role
    private[this] val enumRoleNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.Role.all.mkString(", ")}"

    implicit val pathBindableEnumRole = new PathBindable.Parsing[com.bryzek.dependency.v0.models.Role] (
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    implicit val queryStringBindableEnumRole = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.Role](
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    // Enum: Scms
    private[this] val enumScmsNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.Scms.all.mkString(", ")}"

    implicit val pathBindableEnumScms = new PathBindable.Parsing[com.bryzek.dependency.v0.models.Scms] (
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    implicit val queryStringBindableEnumScms = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.Scms](
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    // Enum: SyncEvent
    private[this] val enumSyncEventNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.SyncEvent.all.mkString(", ")}"

    implicit val pathBindableEnumSyncEvent = new PathBindable.Parsing[com.bryzek.dependency.v0.models.SyncEvent] (
      SyncEvent.fromString(_).get, _.toString, enumSyncEventNotFound
    )

    implicit val queryStringBindableEnumSyncEvent = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.SyncEvent](
      SyncEvent.fromString(_).get, _.toString, enumSyncEventNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.dependency.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[com.bryzek.dependency.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[com.bryzek.dependency.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package com.bryzek.dependency.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.50 http://localhost:9000/bryzek/dependency/0.0.2-dev/play_2_4_client"
    val Version = "0.0.2-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.bryzek.dependency.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.bryzek.dependency.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.user.v0.models.json._

    private[this] val logger = play.api.Logger("com.bryzek.dependency.v0.Client")

    logger.info(s"Initializing com.bryzek.dependency.v0.Client for url $apiUrl")

    def binaries: Binaries = Binaries

    def binaryRecommendations: BinaryRecommendations = BinaryRecommendations

    def binaryVersions: BinaryVersions = BinaryVersions

    def githubUsers: GithubUsers = GithubUsers

    def healthchecks: Healthchecks = Healthchecks

    def items: Items = Items

    def libraries: Libraries = Libraries

    def libraryRecommendations: LibraryRecommendations = LibraryRecommendations

    def libraryVersions: LibraryVersions = LibraryVersions

    def organizations: Organizations = Organizations

    def projectBinaryVersions: ProjectBinaryVersions = ProjectBinaryVersions

    def projectLibraryVersions: ProjectLibraryVersions = ProjectLibraryVersions

    def projects: Projects = Projects

    def recommendations: Recommendations = Recommendations

    def repositories: Repositories = Repositories

    def resolvers: Resolvers = Resolvers

    def subscriptions: Subscriptions = Subscriptions

    def syncs: Syncs = Syncs

    def users: Users = Users

    def watchProjects: WatchProjects = WatchProjects

    object Binaries extends Binaries {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Binary]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          projectGuid.map("project_guid" -> _.toString),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/binaries", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Binary]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Binary]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Binary] = {
        _executeRequest("GET", s"/binaries/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Binary", r, _.validate[com.bryzek.dependency.v0.models.Binary])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        binaryForm: com.bryzek.dependency.v0.models.BinaryForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Binary] = {
        val payload = play.api.libs.json.Json.toJson(binaryForm)

        _executeRequest("POST", s"/binaries", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Binary", r, _.validate[com.bryzek.dependency.v0.models.Binary])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/binaries/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object BinaryRecommendations extends BinaryRecommendations {
      override def getRecommendationsAndBinariesAndProjectsByProjectGuid(
        projectGuid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.BinaryRecommendation]] = {
        _executeRequest("GET", s"/recommendations/binaries/projects/${projectGuid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.BinaryRecommendation]", r, _.validate[Seq[com.bryzek.dependency.v0.models.BinaryRecommendation]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object BinaryVersions extends BinaryVersions {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.BinaryVersion]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          binaryGuid.map("binary_guid" -> _.toString),
          projectGuid.map("project_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/binary_versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.BinaryVersion]", r, _.validate[Seq[com.bryzek.dependency.v0.models.BinaryVersion]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.BinaryVersion] = {
        _executeRequest("GET", s"/binary_versions/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.BinaryVersion", r, _.validate[com.bryzek.dependency.v0.models.BinaryVersion])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object GithubUsers extends GithubUsers {
      override def postAuthenticationsAndGithub(
        githubAuthenticationForm: com.bryzek.dependency.v0.models.GithubAuthenticationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(githubAuthenticationForm)

        _executeRequest("POST", s"/authentications/github", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("io.flow.user.v0.models.User", r, _.validate[io.flow.user.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Items extends Items {
      override def getSearch(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/search", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Item]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Item]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Libraries extends Libraries {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        groupId: _root_.scala.Option[String] = None,
        artifactId: _root_.scala.Option[String] = None,
        resolverGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Library]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          projectGuid.map("project_guid" -> _.toString),
          groupId.map("group_id" -> _),
          artifactId.map("artifact_id" -> _),
          resolverGuid.map("resolver_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/libraries", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Library]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Library]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Library] = {
        _executeRequest("GET", s"/libraries/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Library", r, _.validate[com.bryzek.dependency.v0.models.Library])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        libraryForm: com.bryzek.dependency.v0.models.LibraryForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Library] = {
        val payload = play.api.libs.json.Json.toJson(libraryForm)

        _executeRequest("POST", s"/libraries", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Library", r, _.validate[com.bryzek.dependency.v0.models.Library])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/libraries/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object LibraryRecommendations extends LibraryRecommendations {
      override def getRecommendationsAndLibrariesAndProjectsByProjectGuid(
        projectGuid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.LibraryRecommendation]] = {
        _executeRequest("GET", s"/recommendations/libraries/projects/${projectGuid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.LibraryRecommendation]", r, _.validate[Seq[com.bryzek.dependency.v0.models.LibraryRecommendation]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object LibraryVersions extends LibraryVersions {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.LibraryVersion]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          libraryGuid.map("library_guid" -> _.toString),
          projectGuid.map("project_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/library_versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.LibraryVersion]", r, _.validate[Seq[com.bryzek.dependency.v0.models.LibraryVersion]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.LibraryVersion] = {
        _executeRequest("GET", s"/library_versions/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.LibraryVersion", r, _.validate[com.bryzek.dependency.v0.models.LibraryVersion])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        key: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          key.map("key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Organization]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Organization]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getUsersByUserGuid(
        userGuid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/users/${userGuid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Organization", r, _.validate[com.bryzek.dependency.v0.models.Organization])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Organization", r, _.validate[com.bryzek.dependency.v0.models.Organization])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        organizationForm: com.bryzek.dependency.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Organization", r, _.validate[com.bryzek.dependency.v0.models.Organization])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def putByGuid(
        guid: _root_.java.util.UUID,
        organizationForm: com.bryzek.dependency.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${guid}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Organization", r, _.validate[com.bryzek.dependency.v0.models.Organization])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object ProjectBinaryVersions extends ProjectBinaryVersions {
      override def get(
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        binaryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.ProjectBinaryVersion]] = {
        val queryParameters = Seq(
          projectGuid.map("project_guid" -> _.toString),
          binaryGuid.map("binary_guid" -> _.toString),
          binaryVersionGuid.map("binary_version_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/project_binary_versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.ProjectBinaryVersion]", r, _.validate[Seq[com.bryzek.dependency.v0.models.ProjectBinaryVersion]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object ProjectLibraryVersions extends ProjectLibraryVersions {
      override def get(
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        libraryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.ProjectLibraryVersion]] = {
        val queryParameters = Seq(
          projectGuid.map("project_guid" -> _.toString),
          libraryGuid.map("library_guid" -> _.toString),
          libraryVersionGuid.map("library_version_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/project_library_versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.ProjectLibraryVersion]", r, _.validate[Seq[com.bryzek.dependency.v0.models.ProjectLibraryVersion]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Projects extends Projects {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        name: _root_.scala.Option[String] = None,
        groupId: _root_.scala.Option[String] = None,
        artifactId: _root_.scala.Option[String] = None,
        version: _root_.scala.Option[String] = None,
        libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        libraryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        binary: _root_.scala.Option[String] = None,
        binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        binaryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Project]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          name.map("name" -> _),
          groupId.map("group_id" -> _),
          artifactId.map("artifact_id" -> _),
          version.map("version" -> _),
          libraryGuid.map("library_guid" -> _.toString),
          libraryVersionGuid.map("library_version_guid" -> _.toString),
          binary.map("binary" -> _),
          binaryGuid.map("binary_guid" -> _.toString),
          binaryVersionGuid.map("binary_version_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/projects", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Project]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Project]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project] = {
        _executeRequest("GET", s"/projects/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Project", r, _.validate[com.bryzek.dependency.v0.models.Project])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        projectForm: com.bryzek.dependency.v0.models.ProjectForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("POST", s"/projects", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Project", r, _.validate[com.bryzek.dependency.v0.models.Project])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def putByGuid(
        guid: _root_.java.util.UUID,
        projectForm: com.bryzek.dependency.v0.models.ProjectForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("PUT", s"/projects/${guid}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Project", r, _.validate[com.bryzek.dependency.v0.models.Project])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 409")
        }
      }

      override def patchByGuid(
        guid: _root_.java.util.UUID,
        projectPatchForm: com.bryzek.dependency.v0.models.ProjectPatchForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectPatchForm)

        _executeRequest("PATCH", s"/projects/${guid}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Project", r, _.validate[com.bryzek.dependency.v0.models.Project])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/projects/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Recommendations extends Recommendations {
      override def get(
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        `type`: _root_.scala.Option[com.bryzek.dependency.v0.models.RecommendationType] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Recommendation]] = {
        val queryParameters = Seq(
          projectGuid.map("project_guid" -> _.toString),
          `type`.map("type" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/recommendations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Recommendation]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Recommendation]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Repositories extends Repositories {
      override def getGithub(
        name: _root_.scala.Option[String] = None,
        organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        existingProject: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Repository]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          organizationGuid.map("organization_guid" -> _.toString),
          existingProject.map("existing_project" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/repositories/github", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Repository]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Repository]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Resolvers extends Resolvers {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Resolver]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/resolvers", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Resolver]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Resolver]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Resolver] = {
        _executeRequest("GET", s"/resolvers/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Resolver", r, _.validate[com.bryzek.dependency.v0.models.Resolver])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        resolverForm: com.bryzek.dependency.v0.models.ResolverForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Resolver] = {
        val payload = play.api.libs.json.Json.toJson(resolverForm)

        _executeRequest("POST", s"/resolvers", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Resolver", r, _.validate[com.bryzek.dependency.v0.models.Resolver])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/resolvers/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        publication: _root_.scala.Option[com.bryzek.dependency.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Subscription]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Subscription]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Subscription]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Subscription", r, _.validate[com.bryzek.dependency.v0.models.Subscription])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        subscriptionForm: com.bryzek.dependency.v0.models.SubscriptionForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        _executeRequest("POST", s"/subscriptions", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.Subscription", r, _.validate[com.bryzek.dependency.v0.models.Subscription])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/subscriptions/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Syncs extends Syncs {
      override def get(
        objectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        event: _root_.scala.Option[com.bryzek.dependency.v0.models.SyncEvent] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Sync]] = {
        val queryParameters = Seq(
          objectGuid.map("object_guid" -> _.toString),
          event.map("event" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/syncs", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.Sync]", r, _.validate[Seq[com.bryzek.dependency.v0.models.Sync]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Users extends Users {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        email: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.user.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          email.map("email" -> _)
        ).flatten

        _executeRequest("GET", s"/", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[io.flow.user.v0.models.User]", r, _.validate[Seq[io.flow.user.v0.models.User]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User] = {
        _executeRequest("GET", s"/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("io.flow.user.v0.models.User", r, _.validate[io.flow.user.v0.models.User])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        userForm: io.flow.user.v0.models.UserForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("io.flow.user.v0.models.User", r, _.validate[io.flow.user.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }
    }

    object WatchProjects extends WatchProjects {
      override def getWatchesAndProjects(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.WatchProject]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          projectGuid.map("project_guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          guids.getOrElse(Nil).map("guids" -> _.toString)

        _executeRequest("GET", s"/watches/projects", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[com.bryzek.dependency.v0.models.WatchProject]", r, _.validate[Seq[com.bryzek.dependency.v0.models.WatchProject]])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getWatchesAndProjectsByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.WatchProject] = {
        _executeRequest("GET", s"/watches/projects/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.WatchProject", r, _.validate[com.bryzek.dependency.v0.models.WatchProject])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def postWatchesAndProjects(
        watchProjectForm: com.bryzek.dependency.v0.models.WatchProjectForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.WatchProject] = {
        val payload = play.api.libs.json.Json.toJson(watchProjectForm)

        _executeRequest("POST", s"/watches/projects", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.WatchProject", r, _.validate[com.bryzek.dependency.v0.models.WatchProject])
          case r if r.status == 201 => _root_.com.bryzek.dependency.v0.Client.parseJson("com.bryzek.dependency.v0.models.WatchProject", r, _.validate[com.bryzek.dependency.v0.models.WatchProject])
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw new com.bryzek.dependency.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 409")
        }
      }

      override def deleteWatchesAndProjectsByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/watches/projects/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.dependency.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Binaries {
    /**
     * Search binaries. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Binary]]

    /**
     * Returns information about the binary with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Binary]

    /**
     * Create a new binary.
     */
    def post(
      binaryForm: com.bryzek.dependency.v0.models.BinaryForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Binary]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait BinaryRecommendations {
    /**
     * Get recommendations for which binaries to upgrade
     */
    def getRecommendationsAndBinariesAndProjectsByProjectGuid(
      projectGuid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.BinaryRecommendation]]
  }

  trait BinaryVersions {
    /**
     * Search binary versions. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.BinaryVersion]]

    /**
     * Returns information about the binary version with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.BinaryVersion]
  }

  trait GithubUsers {
    /**
     * Used to authenticate a user via github
     */
    def postAuthenticationsAndGithub(
      githubAuthenticationForm: com.bryzek.dependency.v0.models.GithubAuthenticationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User]
  }

  trait Healthchecks {
    def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  trait Items {
    /**
     * Returns a list of all matching items
     */
    def getSearch(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Item]]
  }

  trait Libraries {
    /**
     * Search libraries. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      groupId: _root_.scala.Option[String] = None,
      artifactId: _root_.scala.Option[String] = None,
      resolverGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Library]]

    /**
     * Returns information about the library with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Library]

    /**
     * Create a new library.
     */
    def post(
      libraryForm: com.bryzek.dependency.v0.models.LibraryForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Library]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait LibraryRecommendations {
    /**
     * Get recommendations for which libraries to upgrade
     */
    def getRecommendationsAndLibrariesAndProjectsByProjectGuid(
      projectGuid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.LibraryRecommendation]]
  }

  trait LibraryVersions {
    /**
     * Search library versions. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.LibraryVersion]]

    /**
     * Returns information about the library version with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.LibraryVersion]
  }

  trait Organizations {
    /**
     * Search organizations. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Organization]]

    /**
     * Returns the organization representing the individual user.
     */
    def getUsersByUserGuid(
      userGuid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization]

    /**
     * Returns information about the organization with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: com.bryzek.dependency.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization]

    /**
     * Update an existing organization.
     */
    def putByGuid(
      guid: _root_.java.util.UUID,
      organizationForm: com.bryzek.dependency.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Organization]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait ProjectBinaryVersions {
    /**
     * Get detailed information on every project using this binary, including the
     * precise version
     */
    def get(
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      binaryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.ProjectBinaryVersion]]
  }

  trait ProjectLibraryVersions {
    /**
     * Get detailed information on every project using this library, including the
     * precise version
     */
    def get(
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      libraryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.ProjectLibraryVersion]]
  }

  trait Projects {
    /**
     * Search projects. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      name: _root_.scala.Option[String] = None,
      groupId: _root_.scala.Option[String] = None,
      artifactId: _root_.scala.Option[String] = None,
      version: _root_.scala.Option[String] = None,
      libraryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      libraryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      binary: _root_.scala.Option[String] = None,
      binaryGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      binaryVersionGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Project]]

    /**
     * Returns information about the project with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project]

    /**
     * Create a new project.
     */
    def post(
      projectForm: com.bryzek.dependency.v0.models.ProjectForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project]

    /**
     * Update an existing project.
     */
    def putByGuid(
      guid: _root_.java.util.UUID,
      projectForm: com.bryzek.dependency.v0.models.ProjectForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project]

    /**
     * Patch an existing project
     */
    def patchByGuid(
      guid: _root_.java.util.UUID,
      projectPatchForm: com.bryzek.dependency.v0.models.ProjectPatchForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Project]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Recommendations {
    /**
     * Returns a list of recommendations for this user across all of the projects the
     * user is watching
     */
    def get(
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      `type`: _root_.scala.Option[com.bryzek.dependency.v0.models.RecommendationType] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Recommendation]]
  }

  trait Repositories {
    /**
     * Returns a list of repositories from github
     */
    def getGithub(
      name: _root_.scala.Option[String] = None,
      organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      existingProject: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Repository]]
  }

  trait Resolvers {
    /**
     * Search resolvers. Results are paginated
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Resolver]]

    /**
     * Returns information about the resolver with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Resolver]

    /**
     * Create a new resolver.
     */
    def post(
      resolverForm: com.bryzek.dependency.v0.models.ResolverForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Resolver]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      publication: _root_.scala.Option[com.bryzek.dependency.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Subscription]

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: com.bryzek.dependency.v0.models.SubscriptionForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.Subscription]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Syncs {
    def get(
      objectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      event: _root_.scala.Option[com.bryzek.dependency.v0.models.SyncEvent] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.Sync]]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a
     * guid or email - and will receive back either 0 or 1 users.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      email: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.user.v0.models.User]]

    /**
     * Returns information about the user with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User]

    /**
     * Create a new user.
     */
    def post(
      userForm: io.flow.user.v0.models.UserForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.user.v0.models.User]
  }

  trait WatchProjects {
    def getWatchesAndProjects(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      guids: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      projectGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.dependency.v0.models.WatchProject]]

    def getWatchesAndProjectsByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.WatchProject]

    def postWatchesAndProjects(
      watchProjectForm: com.bryzek.dependency.v0.models.WatchProjectForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.dependency.v0.models.WatchProject]

    def deleteWatchesAndProjectsByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import com.bryzek.dependency.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.user.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.com.bryzek.dependency.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}