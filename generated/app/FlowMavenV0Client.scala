/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.44 http://www.apidoc.me/flow/maven/0.0.1-dev/play_2_4_client
 */
package io.flow.maven.v0.models {

  case class Doc(
    id: String,
    g: String,
    a: String,
    latestVersion: String,
    repositoryId: String,
    p: String,
    timestamp: Long,
    versionCount: Long,
    text: Seq[String],
    ec: Seq[String]
  )

  case class Response(
    numFound: Long,
    start: Long,
    docs: Seq[io.flow.maven.v0.models.Doc]
  )

  case class ResponseHeader(
    status: Int,
    QTime: Long,
    params: _root_.scala.Option[Map[String, String]] = None
  )

}

package io.flow.maven.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.maven.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsMavenDoc: play.api.libs.json.Reads[Doc] = {
      (
        (__ \ "id").read[String] and
        (__ \ "g").read[String] and
        (__ \ "a").read[String] and
        (__ \ "latestVersion").read[String] and
        (__ \ "repositoryId").read[String] and
        (__ \ "p").read[String] and
        (__ \ "timestamp").read[Long] and
        (__ \ "versionCount").read[Long] and
        (__ \ "text").read[Seq[String]] and
        (__ \ "ec").read[Seq[String]]
      )(Doc.apply _)
    }

    implicit def jsonWritesMavenDoc: play.api.libs.json.Writes[Doc] = {
      (
        (__ \ "id").write[String] and
        (__ \ "g").write[String] and
        (__ \ "a").write[String] and
        (__ \ "latestVersion").write[String] and
        (__ \ "repositoryId").write[String] and
        (__ \ "p").write[String] and
        (__ \ "timestamp").write[Long] and
        (__ \ "versionCount").write[Long] and
        (__ \ "text").write[Seq[String]] and
        (__ \ "ec").write[Seq[String]]
      )(unlift(Doc.unapply _))
    }

    implicit def jsonReadsMavenResponse: play.api.libs.json.Reads[Response] = {
      (
        (__ \ "numFound").read[Long] and
        (__ \ "start").read[Long] and
        (__ \ "docs").read[Seq[io.flow.maven.v0.models.Doc]]
      )(Response.apply _)
    }

    implicit def jsonWritesMavenResponse: play.api.libs.json.Writes[Response] = {
      (
        (__ \ "numFound").write[Long] and
        (__ \ "start").write[Long] and
        (__ \ "docs").write[Seq[io.flow.maven.v0.models.Doc]]
      )(unlift(Response.unapply _))
    }

    implicit def jsonReadsMavenResponseHeader: play.api.libs.json.Reads[ResponseHeader] = {
      (
        (__ \ "status").read[Int] and
        (__ \ "QTime").read[Long] and
        (__ \ "params").readNullable[Map[String, String]]
      )(ResponseHeader.apply _)
    }

    implicit def jsonWritesMavenResponseHeader: play.api.libs.json.Writes[ResponseHeader] = {
      (
        (__ \ "status").write[Int] and
        (__ \ "QTime").write[Long] and
        (__ \ "params").writeNullable[Map[String, String]]
      )(unlift(ResponseHeader.unapply _))
    }
  }
}

package io.flow.maven.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.maven.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.maven.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.44 http://www.apidoc.me/flow/maven/0.0.1-dev/play_2_4_client"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.maven.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import io.flow.maven.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.maven.v0.Client")

    logger.info(s"Initializing io.flow.maven.v0.Client for url $apiUrl")

    def docs: Docs = Docs

    object Docs extends Docs {
      override def getSelect(
        q: String,
        wt: String = "json",
        rows: _root_.scala.Option[Long] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.maven.v0.models.Doc]] = {
        val queryParameters = Seq(
          Some("q" -> q),
          Some("wt" -> wt),
          rows.map("rows" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/select", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.maven.v0.Client.parseJson("Seq[io.flow.maven.v0.models.Doc]", r, _.validate[Seq[io.flow.maven.v0.models.Doc]])
          case r => throw new io.flow.maven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.maven.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Docs {
    def getSelect(
      q: String,
      wt: String = "json",
      rows: _root_.scala.Option[Long] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.maven.v0.models.Doc]]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}