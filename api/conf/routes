# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.1-dev
# apidoc:0.9.48 http://localhost:9000/bryzek/dependency/0.0.1-dev/play_2_x_routes

GET        /binaries                                             controllers.Binaries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], name: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /binaries/:guid                                       controllers.Binaries.getByGuid(guid: _root_.java.util.UUID)
POST       /binaries                                             controllers.Binaries.post()
DELETE     /binaries/:guid                                       controllers.Binaries.deleteByGuid(guid: _root_.java.util.UUID)
GET        /recommendations/binaries/projects/:project_guid      controllers.BinaryRecommendations.getRecommendationsAndBinariesAndProjectsByProjectGuid(project_guid: _root_.java.util.UUID)
GET        /binary_versions                                      controllers.BinaryVersions.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], binary_guid: _root_.scala.Option[_root_.java.util.UUID], project_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /binary_versions/:guid                                controllers.BinaryVersions.getByGuid(guid: _root_.java.util.UUID)
POST       /authentications/github                               controllers.GithubUsers.postAuthenticationsAndGithub()
GET        /_internal_/healthcheck                               controllers.Healthchecks.getInternalAndHealthcheck()
GET        /                                                     controllers.Users.get(guid: _root_.scala.Option[_root_.java.util.UUID], email: _root_.scala.Option[String])
POST       /                                                     controllers.Users.post()
GET        /search                                               controllers.Items.getSearch(q: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /libraries                                            controllers.Libraries.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], project_guid: _root_.scala.Option[_root_.java.util.UUID], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /libraries/:guid                                      controllers.Libraries.getByGuid(guid: _root_.java.util.UUID)
POST       /libraries                                            controllers.Libraries.post()
DELETE     /libraries/:guid                                      controllers.Libraries.deleteByGuid(guid: _root_.java.util.UUID)
GET        /recommendations/libraries/projects/:project_guid     controllers.LibraryRecommendations.getRecommendationsAndLibrariesAndProjectsByProjectGuid(project_guid: _root_.java.util.UUID)
GET        /library_versions                                     controllers.LibraryVersions.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], library_guid: _root_.scala.Option[_root_.java.util.UUID], project_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /library_versions/:guid                               controllers.LibraryVersions.getByGuid(guid: _root_.java.util.UUID)
GET        /projects                                             controllers.Projects.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], name: _root_.scala.Option[String], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], version: _root_.scala.Option[String], library_guid: _root_.scala.Option[_root_.java.util.UUID], library_version_guid: _root_.scala.Option[_root_.java.util.UUID], binary: _root_.scala.Option[String], binary_guid: _root_.scala.Option[_root_.java.util.UUID], binary_version_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /projects/:guid                                       controllers.Projects.getByGuid(guid: _root_.java.util.UUID)
POST       /projects                                             controllers.Projects.post()
PUT        /projects/:guid                                       controllers.Projects.putByGuid(guid: _root_.java.util.UUID)
PATCH      /projects/:guid                                       controllers.Projects.patchByGuid(guid: _root_.java.util.UUID)
DELETE     /projects/:guid                                       controllers.Projects.deleteByGuid(guid: _root_.java.util.UUID)
GET        /project_binary_versions                              controllers.ProjectBinaryVersions.get(project_guid: _root_.scala.Option[_root_.java.util.UUID], binary_guid: _root_.scala.Option[_root_.java.util.UUID], binary_version_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /project_library_versions                             controllers.ProjectLibraryVersions.get(project_guid: _root_.scala.Option[_root_.java.util.UUID], library_guid: _root_.scala.Option[_root_.java.util.UUID], library_version_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /recommendations                                      controllers.Recommendations.get(project_guid: _root_.scala.Option[_root_.java.util.UUID], type: _root_.scala.Option[com.bryzek.dependency.v0.models.RecommendationType], limit: Long ?= 25, offset: Long ?= 0)
GET        /repositories/github                                  controllers.Repositories.getGithub(name: _root_.scala.Option[String], existing_project: _root_.scala.Option[Boolean], limit: Long ?= 25, offset: Long ?= 0)
GET        /resolvers                                            controllers.Resolvers.get(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], limit: Long ?= 25, offset: Long ?= 0)
GET        /resolvers/:guid                                      controllers.Resolvers.getByGuid(guid: _root_.java.util.UUID)
POST       /resolvers                                            controllers.Resolvers.post()
DELETE     /resolvers/:guid                                      controllers.Resolvers.deleteByGuid(guid: _root_.java.util.UUID)
GET        /syncs                                                controllers.Syncs.get(object_guid: _root_.scala.Option[_root_.java.util.UUID], event: _root_.scala.Option[com.bryzek.dependency.v0.models.SyncEvent], limit: Long ?= 25, offset: Long ?= 0)
GET        /watches/projects                                     controllers.WatchProjects.getWatchesAndProjects(guid: _root_.scala.Option[_root_.java.util.UUID], guids: _root_.scala.Option[List[_root_.java.util.UUID]], user_guid: _root_.scala.Option[_root_.java.util.UUID], project_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25, offset: Long ?= 0)
GET        /watches/projects/:guid                               controllers.WatchProjects.getWatchesAndProjectsByGuid(guid: _root_.java.util.UUID)
POST       /watches/projects                                     controllers.WatchProjects.postWatchesAndProjects()
DELETE     /watches/projects/:guid                               controllers.WatchProjects.deleteWatchesAndProjectsByGuid(guid: _root_.java.util.UUID)
GET        /:guid                                                controllers.Users.getByGuid(guid: _root_.java.util.UUID)