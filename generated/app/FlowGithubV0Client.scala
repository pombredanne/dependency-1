/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.44 http://www.apidoc.me/flow/github/0.0.1-dev/ning_1_9_client
 */
package io.flow.github.v0.models {

  case class Contents(
    `type`: io.flow.github.v0.models.ContentsType,
    encoding: io.flow.github.v0.models.Encoding,
    size: Long,
    name: String,
    path: String,
    content: _root_.scala.Option[String] = None,
    sha: String,
    url: String,
    gitUrl: String,
    htmlUrl: String,
    downloadUrl: String
  )

  case class Owner(
    id: Long,
    login: String,
    avatarUrl: _root_.scala.Option[String] = None,
    gravatarId: _root_.scala.Option[String] = None,
    url: String,
    htmlUrl: String,
    `type`: io.flow.github.v0.models.OwnerType
  )

  case class Repository(
    id: Long,
    owner: io.flow.github.v0.models.Owner,
    name: String,
    fullName: String,
    description: _root_.scala.Option[String] = None,
    url: String,
    htmlUrl: String
  )

  sealed trait ContentsType

  object ContentsType {

    case object File extends ContentsType { override def toString = "file" }
    case object Dir extends ContentsType { override def toString = "dir" }
    case object Symlink extends ContentsType { override def toString = "symlink" }
    case object Submodule extends ContentsType { override def toString = "submodule" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ContentsType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(File, Dir, Symlink, Submodule)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ContentsType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ContentsType] = byName.get(value.toLowerCase)

  }

  sealed trait Encoding

  object Encoding {

    case object Base64 extends Encoding { override def toString = "base64" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Encoding

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Base64)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Encoding = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Encoding] = byName.get(value.toLowerCase)

  }

  sealed trait OwnerType

  object OwnerType {

    case object User extends OwnerType { override def toString = "User" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends OwnerType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(User)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OwnerType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OwnerType] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility

  object Visibility {

    case object All extends Visibility { override def toString = "all" }
    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(All, Public, Private)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.github.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.github.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsGithubContentsType = __.read[String].map(ContentsType.apply)
    implicit val jsonWritesGithubContentsType = new Writes[ContentsType] {
      def writes(x: ContentsType) = JsString(x.toString)
    }

    implicit val jsonReadsGithubEncoding = __.read[String].map(Encoding.apply)
    implicit val jsonWritesGithubEncoding = new Writes[Encoding] {
      def writes(x: Encoding) = JsString(x.toString)
    }

    implicit val jsonReadsGithubOwnerType = __.read[String].map(OwnerType.apply)
    implicit val jsonWritesGithubOwnerType = new Writes[OwnerType] {
      def writes(x: OwnerType) = JsString(x.toString)
    }

    implicit val jsonReadsGithubVisibility = __.read[String].map(Visibility.apply)
    implicit val jsonWritesGithubVisibility = new Writes[Visibility] {
      def writes(x: Visibility) = JsString(x.toString)
    }

    implicit def jsonReadsGithubContents: play.api.libs.json.Reads[Contents] = {
      (
        (__ \ "type").read[io.flow.github.v0.models.ContentsType] and
        (__ \ "encoding").read[io.flow.github.v0.models.Encoding] and
        (__ \ "size").read[Long] and
        (__ \ "name").read[String] and
        (__ \ "path").read[String] and
        (__ \ "content").readNullable[String] and
        (__ \ "sha").read[String] and
        (__ \ "url").read[String] and
        (__ \ "git_url").read[String] and
        (__ \ "html_url").read[String] and
        (__ \ "download_url").read[String]
      )(Contents.apply _)
    }

    implicit def jsonWritesGithubContents: play.api.libs.json.Writes[Contents] = {
      (
        (__ \ "type").write[io.flow.github.v0.models.ContentsType] and
        (__ \ "encoding").write[io.flow.github.v0.models.Encoding] and
        (__ \ "size").write[Long] and
        (__ \ "name").write[String] and
        (__ \ "path").write[String] and
        (__ \ "content").writeNullable[String] and
        (__ \ "sha").write[String] and
        (__ \ "url").write[String] and
        (__ \ "git_url").write[String] and
        (__ \ "html_url").write[String] and
        (__ \ "download_url").write[String]
      )(unlift(Contents.unapply _))
    }

    implicit def jsonReadsGithubOwner: play.api.libs.json.Reads[Owner] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "login").read[String] and
        (__ \ "avatar_url").readNullable[String] and
        (__ \ "gravatar_id").readNullable[String] and
        (__ \ "url").read[String] and
        (__ \ "html_url").read[String] and
        (__ \ "type").read[io.flow.github.v0.models.OwnerType]
      )(Owner.apply _)
    }

    implicit def jsonWritesGithubOwner: play.api.libs.json.Writes[Owner] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "login").write[String] and
        (__ \ "avatar_url").writeNullable[String] and
        (__ \ "gravatar_id").writeNullable[String] and
        (__ \ "url").write[String] and
        (__ \ "html_url").write[String] and
        (__ \ "type").write[io.flow.github.v0.models.OwnerType]
      )(unlift(Owner.unapply _))
    }

    implicit def jsonReadsGithubRepository: play.api.libs.json.Reads[Repository] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "owner").read[io.flow.github.v0.models.Owner] and
        (__ \ "name").read[String] and
        (__ \ "full_name").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "url").read[String] and
        (__ \ "html_url").read[String]
      )(Repository.apply _)
    }

    implicit def jsonWritesGithubRepository: play.api.libs.json.Writes[Repository] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "owner").write[io.flow.github.v0.models.Owner] and
        (__ \ "name").write[String] and
        (__ \ "full_name").write[String] and
        (__ \ "description").writeNullable[String] and
        (__ \ "url").write[String] and
        (__ \ "html_url").write[String]
      )(unlift(Repository.unapply _))
    }
  }
}



package io.flow.github.v0 {
  import com.ning.http.client.{AsyncCompletionHandler, AsyncHttpClient, AsyncHttpClientConfig, Realm, Request, RequestBuilder, Response}

  object Constants {

    val UserAgent = "apidoc:0.9.44 http://www.apidoc.me/flow/github/0.0.1-dev/ning_1_9_client"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.github.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    asyncHttpClient: AsyncHttpClient = Client.defaultAsyncHttpClient
  ) {
    import org.slf4j.Logger
    import org.slf4j.LoggerFactory
    import io.flow.github.v0.models.json._

    val logger = LoggerFactory.getLogger(getClass)

    def contents: Contents = Contents

    def repositories: Repositories = Repositories

    object Contents extends Contents {
      override def getReposAndReadmeByOwnerAndRepo(
        owner: String,
        repo: String,
        ref: String = "master"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.github.v0.models.Contents] = {
        val queryParameters = Seq(
          Some("ref" -> ref)
        ).flatten

        _executeRequest("GET", s"/repos/${_root_.io.flow.github.v0.PathSegment.encode(owner, "UTF-8")}/${_root_.io.flow.github.v0.PathSegment.encode(repo, "UTF-8")}/readme", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.github.v0.Client.parseJson("io.flow.github.v0.models.Contents", r, _.validate[io.flow.github.v0.models.Contents])
          case r if r.getStatusCode == 401 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r if r.getStatusCode == 404 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 401, 404", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }

      override def getReposByOwnerAndRepoAndPath(
        owner: String,
        repo: String,
        path: String,
        ref: String = "master"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.github.v0.models.Contents] = {
        val queryParameters = Seq(
          Some("ref" -> ref)
        ).flatten

        _executeRequest("GET", s"/repos/${_root_.io.flow.github.v0.PathSegment.encode(owner, "UTF-8")}/${_root_.io.flow.github.v0.PathSegment.encode(repo, "UTF-8")}/contents/${_root_.io.flow.github.v0.PathSegment.encode(path, "UTF-8")}", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.github.v0.Client.parseJson("io.flow.github.v0.models.Contents", r, _.validate[io.flow.github.v0.models.Contents])
          case r if r.getStatusCode == 401 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r if r.getStatusCode == 404 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 401, 404", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }
    }

    object Repositories extends Repositories {
      override def getUserAndRepos(
        visibility: io.flow.github.v0.models.Visibility = io.flow.github.v0.models.Visibility("all"),
        affiliation: _root_.scala.Option[String] = None,
        `type`: _root_.scala.Option[String] = None,
        sort: String = "full_name",
        direction: String = "asc"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]] = {
        val queryParameters = Seq(
          Some("visibility" -> visibility.toString),
          affiliation.map("affiliation" -> _),
          `type`.map("type" -> _),
          Some("sort" -> sort),
          Some("direction" -> direction)
        ).flatten

        _executeRequest("GET", s"/user/repos", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.github.v0.Client.parseJson("Seq[io.flow.github.v0.models.Repository]", r, _.validate[Seq[io.flow.github.v0.models.Repository]])
          case r if r.getStatusCode == 401 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 401", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }

      override def getUsersAndReposByUsername(
        username: String,
        `type`: String = "owner",
        sort: String = "full_name",
        direction: String = "asc"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]] = {
        val queryParameters = Seq(
          Some("type" -> `type`),
          Some("sort" -> sort),
          Some("direction" -> direction)
        ).flatten

        _executeRequest("GET", s"/users/${_root_.io.flow.github.v0.PathSegment.encode(username, "UTF-8")}/repos", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.github.v0.Client.parseJson("Seq[io.flow.github.v0.models.Repository]", r, _.validate[Seq[io.flow.github.v0.models.Repository]])
          case r if r.getStatusCode == 401 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 401", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }

      override def getOrgsAndReposByOrg(
        org: String,
        `type`: String = "all",
        sort: String = "full_name",
        direction: String = "asc"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]] = {
        val queryParameters = Seq(
          Some("type" -> `type`),
          Some("sort" -> sort),
          Some("direction" -> direction)
        ).flatten

        _executeRequest("GET", s"/orgs/${_root_.io.flow.github.v0.PathSegment.encode(org, "UTF-8")}/repos", queryParameters = queryParameters).map {
          case r if r.getStatusCode == 200 => _root_.io.flow.github.v0.Client.parseJson("Seq[io.flow.github.v0.models.Repository]", r, _.validate[Seq[io.flow.github.v0.models.Repository]])
          case r if r.getStatusCode == 401 => throw new io.flow.github.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 401", requestUri = Some(r.getUri.toJavaNetURI))
        }
      }
    }

    def _logRequest(request: Request) {
      logger.info("_logRequest: " + request)
    }

    def _requestBuilder(method: String, path: String): RequestBuilder = {
      val builder = new RequestBuilder(method)
        .setUrl(apiUrl + path)
        .addHeader("User-Agent", Constants.UserAgent)
        .addHeader("X-Apidoc-Version", Constants.Version)
        .addHeader("X-Apidoc-Version-Major", Constants.VersionMajor.toString)

      defaultHeaders.foreach { h => builder.addHeader(h._1, h._2) }

      auth.fold(builder) {
        case Authorization.Basic(username, password) => {
          builder.setRealm(
            new Realm.RealmBuilder()
              .setPrincipal(username)
              .setUsePreemptiveAuth(true)
              .setScheme(Realm.AuthScheme.BASIC)
              .build()
          )
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.ning.http.client.Response] = {
      val request = _requestBuilder(method, path)

      queryParameters.foreach { pair =>
        request.addQueryParam(pair._1, pair._2)
      }

      val requestWithParamsAndBody = body.fold(request) { b =>
        val serialized = play.api.libs.json.Json.stringify(b)
        request.setBody(serialized).addHeader("Content-type", "application/json; charset=UTF-8")
      }

      val finalRequest = requestWithParamsAndBody.build()
      _logRequest(finalRequest)

      val result = scala.concurrent.Promise[com.ning.http.client.Response]()
      asyncHttpClient.executeRequest(finalRequest,
        new AsyncCompletionHandler[Unit]() {
          override def onCompleted(r: com.ning.http.client.Response) = result.success(r)
          override def onThrowable(t: Throwable) = result.failure(t)
        }
      )
      result.future
    }

  }

  object Client {

    private lazy val defaultAsyncHttpClient = {
      new AsyncHttpClient(
        new AsyncHttpClientConfig.Builder()
          .setExecutorService(java.util.concurrent.Executors.newCachedThreadPool())
          .build()
      )
    }

    def parseJson[T](
      className: String,
      r: _root_.com.ning.http.client.Response,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.getResponseBody("UTF-8"))) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.github.v0.errors.FailedRequest(r.getStatusCode, s"Invalid json for class[" + className + "]: " + errors.mkString(" "), requestUri = Some(r.getUri.toJavaNetURI))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Contents {
    def getReposAndReadmeByOwnerAndRepo(
      owner: String,
      repo: String,
      ref: String = "master"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.github.v0.models.Contents]

    def getReposByOwnerAndRepoAndPath(
      owner: String,
      repo: String,
      path: String,
      ref: String = "master"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.github.v0.models.Contents]
  }

  trait Repositories {
    def getUserAndRepos(
      visibility: io.flow.github.v0.models.Visibility = io.flow.github.v0.models.Visibility("all"),
      affiliation: _root_.scala.Option[String] = None,
      `type`: _root_.scala.Option[String] = None,
      sort: String = "full_name",
      direction: String = "asc"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]]

    /**
     * List public repositories for the specified user.
     */
    def getUsersAndReposByUsername(
      username: String,
      `type`: String = "owner",
      sort: String = "full_name",
      direction: String = "asc"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]]

    /**
     * List repositories for the specified org.
     */
    def getOrgsAndReposByOrg(
      org: String,
      `type`: String = "all",
      sort: String = "full_name",
      direction: String = "asc"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]]
  }

  package errors {

    import io.flow.github.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

  object PathSegment {
    // See https://github.com/playframework/playframework/blob/2.3.x/framework/src/play/src/main/scala/play/utils/UriEncoding.scala
    def encode(s: String, inputCharset: String): String = {
      val in = s.getBytes(inputCharset)
      val out = new java.io.ByteArrayOutputStream()
      for (b <- in) {
        val allowed = segmentChars.get(b & 0xFF)
        if (allowed) {
          out.write(b)
        } else {
          out.write('%')
          out.write(upperHex((b >> 4) & 0xF))
          out.write(upperHex(b & 0xF))
        }
      }
      out.toString("US-ASCII")
    }

    private def upperHex(x: Int): Int = {
      // Assume 0 <= x < 16
      if (x < 10) (x + '0') else (x - 10 + 'A')
    }

    private[this] val segmentChars: java.util.BitSet = membershipTable(pchar)

    private def pchar: Seq[Char] = {
      val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c
      val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')
      val subDelims = Seq('!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=')
      unreserved ++ subDelims ++ Seq(':', '@')
    }

    private def membershipTable(chars: Seq[Char]): java.util.BitSet = {
      val bits = new java.util.BitSet(256)
      for (c <- chars) { bits.set(c.toInt) }
      bits
    }
  }
}